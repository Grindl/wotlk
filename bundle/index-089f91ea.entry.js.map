{"version":3,"file":"index-089f91ea.entry.js","sources":["../../../ui/raid/presets.ts","../../../ui/raid/raid_picker.ts","../../../ui/raid/raid_stats.ts","../../../ui/raid/raid_tab.ts","../../../ui/core/components/raid_target_picker.ts","../../../ui/raid/assignments_picker.ts","../../../ui/raid/blessings_picker.ts","../../../ui/raid/tanks_picker.ts","../../../ui/raid/settings_tab.ts","../../../ui/raid/import_export.ts","../../../ui/raid/raid_sim_ui.ts","../../../ui/raid/index.ts"],"sourcesContent":["import { IndividualSimUI, IndividualSimUIConfig, RaidSimPreset } from '../core/individual_sim_ui.js';\n\nimport {\n\tSpec\n} from '../core/proto/common.js';\nimport {\n\tnaturalSpecOrder,\n} from '../core/proto_utils/utils.js';\n\nimport { Player, getSpecConfig } from '../core/player.js';\n\nimport { TankDeathknightSimUI } from '../tank_deathknight/sim.js';\nimport { DeathknightSimUI } from '../deathknight/sim.js';\nimport { BalanceDruidSimUI } from '../balance_druid/sim.js';\nimport { FeralDruidSimUI } from '../feral_druid/sim.js';\nimport { FeralTankDruidSimUI } from '../feral_tank_druid/sim.js';\nimport { RestorationDruidSimUI } from '../restoration_druid/sim.js';\nimport { ElementalShamanSimUI } from '../elemental_shaman/sim.js';\nimport { EnhancementShamanSimUI } from '../enhancement_shaman/sim.js';\nimport { RestorationShamanSimUI } from '../restoration_shaman/sim.js';\nimport { HunterSimUI } from '../hunter/sim.js';\nimport { MageSimUI } from '../mage/sim.js';\nimport { RogueSimUI } from '../rogue/sim.js';\nimport { HolyPaladinSimUI } from '../holy_paladin/sim.js';\nimport { ProtectionPaladinSimUI } from '../protection_paladin/sim.js';\nimport { RetributionPaladinSimUI } from '../retribution_paladin/sim.js';\nimport { HealingPriestSimUI } from '../healing_priest/sim.js';\nimport { ShadowPriestSimUI } from '../shadow_priest/sim.js';\nimport { SmitePriestSimUI } from '../smite_priest/sim.js';\nimport { WarriorSimUI } from '../warrior/sim.js';\nimport { ProtectionWarriorSimUI } from '../protection_warrior/sim.js';\nimport { WarlockSimUI } from '../warlock/sim.js';\n\nexport const specSimFactories: Record<Spec, (parentElem: HTMLElement, player: Player<any>) => IndividualSimUI<any>> = {\n\t[Spec.SpecTankDeathknight]: (parentElem: HTMLElement, player: Player<any>) => new TankDeathknightSimUI(parentElem, player),\n\t[Spec.SpecDeathknight]: (parentElem: HTMLElement, player: Player<any>) => new DeathknightSimUI(parentElem, player),\n\t[Spec.SpecBalanceDruid]: (parentElem: HTMLElement, player: Player<any>) => new BalanceDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralTankDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralTankDruidSimUI(parentElem, player),\n\t[Spec.SpecRestorationDruid]: (parentElem: HTMLElement, player: Player<any>) => new RestorationDruidSimUI(parentElem, player),\n\t[Spec.SpecElementalShaman]: (parentElem: HTMLElement, player: Player<any>) => new ElementalShamanSimUI(parentElem, player),\n\t[Spec.SpecEnhancementShaman]: (parentElem: HTMLElement, player: Player<any>) => new EnhancementShamanSimUI(parentElem, player),\n\t[Spec.SpecRestorationShaman]: (parentElem: HTMLElement, player: Player<any>) => new RestorationShamanSimUI(parentElem, player),\n\t[Spec.SpecHunter]: (parentElem: HTMLElement, player: Player<any>) => new HunterSimUI(parentElem, player),\n\t[Spec.SpecMage]: (parentElem: HTMLElement, player: Player<any>) => new MageSimUI(parentElem, player),\n\t[Spec.SpecRogue]: (parentElem: HTMLElement, player: Player<any>) => new RogueSimUI(parentElem, player),\n\t[Spec.SpecHolyPaladin]: (parentElem: HTMLElement, player: Player<any>) => new HolyPaladinSimUI(parentElem, player),\n\t[Spec.SpecProtectionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionPaladinSimUI(parentElem, player),\n\t[Spec.SpecRetributionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new RetributionPaladinSimUI(parentElem, player),\n\t[Spec.SpecHealingPriest]: (parentElem: HTMLElement, player: Player<any>) => new HealingPriestSimUI(parentElem, player),\n\t[Spec.SpecShadowPriest]: (parentElem: HTMLElement, player: Player<any>) => new ShadowPriestSimUI(parentElem, player),\n\t[Spec.SpecSmitePriest]: (parentElem: HTMLElement, player: Player<any>) => new SmitePriestSimUI(parentElem, player),\n\t[Spec.SpecWarrior]: (parentElem: HTMLElement, player: Player<any>) => new WarriorSimUI(parentElem, player),\n\t[Spec.SpecProtectionWarrior]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionWarriorSimUI(parentElem, player),\n\t[Spec.SpecWarlock]: (parentElem: HTMLElement, player: Player<any>) => new WarlockSimUI(parentElem, player),\n};\n\nexport const playerPresets: Array<RaidSimPreset<any>> = naturalSpecOrder\n\t.map(getSpecConfig)\n\t.map(config => {\n\t\tconst indSimUiConfig = config as IndividualSimUIConfig<any>;\n\t\treturn indSimUiConfig.raidSimPresets;\n\t})\n\t.flat();\n\nexport const implementedSpecs: Array<Spec> = [...new Set(playerPresets.map(preset => preset.spec))];\n","import { Component } from '../core/components/component.js';\nimport { EnumPicker } from '../core/components/enum_picker.js';\nimport { Raid } from '../core/raid.js';\nimport { MAX_PARTY_SIZE } from '../core/party.js';\nimport { Party } from '../core/party.js';\nimport { Player } from '../core/player.js';\nimport { Player as PlayerProto } from '../core/proto/api.js';\nimport { Class } from '../core/proto/common.js';\nimport { Profession } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Faction } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { cssClassForClass, playerToSpec } from '../core/proto_utils/utils.js';\nimport { isTankSpec } from '../core/proto_utils/utils.js';\nimport { specToClass } from '../core/proto_utils/utils.js';\nimport { newUnitReference } from '../core/proto_utils/utils.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { formatDeltaTextElem } from '../core/utils.js';\nimport { getEnumValues } from '../core/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { playerPresets, specSimFactories } from './presets.js';\n\nimport { BalanceDruid_Options as BalanceDruidOptions } from '../core/proto/druid.js';\nimport { Mage_Options as MageOptions } from '../core/proto/mage.js';\nimport { SmitePriest_Options as SmitePriestOptions } from '../core/proto/priest.js';\nimport { BaseModal } from '../core/components/base_modal.js';\nimport { Tooltip } from 'bootstrap';\n\nconst NEW_PLAYER: number = -1;\n\nconst LATEST_PHASE_WITH_ALL_PRESETS = Math.min(...playerPresets.map(preset => Math.max(...Object.keys(preset.defaultGear[Faction.Alliance]).map(k => parseInt(k)))));\n\nenum DragType {\n\tNone,\n\tNew,\n\tMove,\n\tSwap,\n\tCopy,\n}\n\nexport class RaidPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly raid: Raid;\n\treadonly partyPickers: Array<PartyPicker>;\n\treadonly newPlayerPicker: NewPlayerPicker;\n\n\t// Hold data about the player being dragged while the drag is happening.\n\tcurrentDragPlayer: Player<any> | null = null;\n\tcurrentDragPlayerFromIndex: number = NEW_PLAYER;\n\tcurrentDragType: DragType = DragType.New;\n\n\t// Hold data about the party being dragged while the drag is happening.\n\tcurrentDragParty: PartyPicker | null = null;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.raid = raidSimUI.sim.raid;\n\n\t\tconst raidControls = document.createElement('div');\n\t\traidControls.classList.add('raid-controls');\n\t\tthis.rootElem.appendChild(raidControls);\n\n\t\tthis.newPlayerPicker = new NewPlayerPicker(this.rootElem, this);\n\n\t\tconst _activePartiesSelector = new EnumPicker<Raid>(raidControls, this.raidSimUI.sim.raid, {\n\t\t\tlabel: 'Raid Size',\n\t\t\tlabelTooltip: 'Number of players participating in the sim.',\n\t\t\tvalues: [\n\t\t\t\t{ name: '5', value: 1 },\n\t\t\t\t{ name: '10', value: 2 },\n\t\t\t\t{ name: '25', value: 5 },\n\t\t\t\t{ name: '40', value: 8 },\n\t\t\t],\n\t\t\tchangedEvent: (raid: Raid) => raid.numActivePartiesChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getNumActiveParties(),\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: number) => {\n\t\t\t\traid.setNumActiveParties(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst _factionSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Faction',\n\t\t\tlabelTooltip: 'Default faction for newly-created players.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Alliance', value: Faction.Alliance },\n\t\t\t\t{ name: 'Horde', value: Faction.Horde },\n\t\t\t],\n\t\t\tchangedEvent: (_picker: NewPlayerPicker) => this.raid.sim.factionChangeEmitter,\n\t\t\tgetValue: (_picker: NewPlayerPicker) => this.raid.sim.getFaction(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: Faction) => {\n\t\t\t\tthis.raid.sim.setFaction(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst _phaseSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Gear',\n\t\t\tlabelTooltip: 'Newly-created players will start with approximate BIS gear from this phase.',\n\t\t\tvalues: [...Array(LATEST_PHASE_WITH_ALL_PRESETS).keys()].map(val => {\n\t\t\t\tconst phase = val + 1;\n\t\t\t\treturn { name: 'Phase ' + phase, value: phase };\n\t\t\t}),\n\t\t\tchangedEvent: (_picker: NewPlayerPicker) => this.raid.sim.phaseChangeEmitter,\n\t\t\tgetValue: (_picker: NewPlayerPicker) => this.raid.sim.getPhase(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: number) => {\n\t\t\t\tthis.raid.sim.setPhase(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst partiesContainer = document.createElement('div');\n\t\tpartiesContainer.classList.add('parties-container');\n\t\tthis.rootElem.appendChild(partiesContainer);\n\n\t\tthis.partyPickers = this.raid.getParties().map((party, i) => new PartyPicker(partiesContainer, party, i, this));\n\n\t\tconst updateActiveParties = () => {\n\t\t\tthis.partyPickers.forEach(partyPicker => {\n\t\t\t\tif (partyPicker.index < this.raidSimUI.sim.raid.getNumActiveParties()) {\n\t\t\t\t\tpartyPicker.rootElem.classList.add('active');\n\t\t\t\t} else {\n\t\t\t\t\tpartyPicker.rootElem.classList.remove('active');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tthis.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(updateActiveParties);\n\t\tupdateActiveParties();\n\n\t\tthis.rootElem.ondragend = _event => {\n\t\t\t// Uncomment to remove player when dropped 'off' the raid.\n\t\t\t//if (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t//\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\t//\tplayerPicker.setPlayer(null, null, DragType.None);\n\t\t\t//}\n\n\t\t\tthis.clearDragPlayer();\n\t\t\tthis.clearDragParty();\n\t\t};\n\t}\n\n\tgetCurrentFaction(): Faction {\n\t\treturn this.raid.sim.getFaction();\n\t}\n\n\tgetCurrentPhase(): number {\n\t\treturn this.raid.sim.getPhase();\n\t}\n\n\tgetPlayerPicker(raidIndex: number): PlayerPicker {\n\t\treturn this.partyPickers[Math.floor(raidIndex / MAX_PARTY_SIZE)].playerPickers[raidIndex % MAX_PARTY_SIZE];\n\t}\n\n\tgetPlayerPickers(): Array<PlayerPicker> {\n\t\treturn [...new Array(25).keys()].map(i => this.getPlayerPicker(i));\n\t}\n\n\tsetDragPlayer(player: Player<any>, fromIndex: number, type: DragType) {\n\t\tthis.clearDragPlayer();\n\n\t\tthis.currentDragPlayer = player;\n\t\tthis.currentDragPlayerFromIndex = fromIndex;\n\t\tthis.currentDragType = type;\n\n\t\tif (fromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(fromIndex);\n\t\t\tplayerPicker.rootElem.classList.add('dragfrom');\n\t\t}\n\t}\n\n\tclearDragPlayer() {\n\t\tif (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\tplayerPicker.rootElem.classList.remove('dragfrom');\n\t\t}\n\n\t\tthis.currentDragPlayer = null;\n\t\tthis.currentDragPlayerFromIndex = NEW_PLAYER;\n\t\tthis.currentDragType = DragType.New;\n\t}\n\n\tsetDragParty(party: PartyPicker) {\n\t\tthis.currentDragParty = party;\n\t\tparty.rootElem.classList.add('dragfrom');\n\t}\n\tclearDragParty() {\n\t\tif (this.currentDragParty) {\n\t\t\tthis.currentDragParty.rootElem.classList.remove('dragfrom');\n\t\t\tthis.currentDragParty = null;\n\t\t}\n\t}\n}\n\nexport class PartyPicker extends Component {\n\treadonly party: Party;\n\treadonly index: number;\n\treadonly raidPicker: RaidPicker;\n\treadonly playerPickers: Array<PlayerPicker>;\n\n\tconstructor(parent: HTMLElement, party: Party, index: number, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'party-picker-root');\n\t\tthis.party = party;\n\t\tthis.index = index;\n\t\tthis.raidPicker = raidPicker;\n\n\t\tthis.rootElem.setAttribute('draggable', 'true');\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"party-header\">\n\t\t\t\t<label class=\"party-label form-label\">Group ${index + 1}</label>\n\t\t\t\t<div class=\"party-results\">\n\t\t\t\t\t<span class=\"party-results-dps\"></span>\n\t\t\t\t\t<span class=\"party-results-reference-delta\"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"players-container\">\n\t\t\t</div>\n\t\t`;\n\n\t\tconst playersContainer = this.rootElem.getElementsByClassName('players-container')[0] as HTMLDivElement;\n\t\tthis.playerPickers = [...Array(MAX_PARTY_SIZE).keys()].map(i => new PlayerPicker(playersContainer, this, i));\n\n\t\tconst dpsResultElem = this.rootElem.getElementsByClassName('party-results-dps')[0] as HTMLElement;\n\t\tconst referenceDeltaElem = this.rootElem.getElementsByClassName('party-results-reference-delta')[0] as HTMLElement;\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst partyDps = currentData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\n\t\t\tif (partyDps == 0 && referenceDps == 0) {\n\t\t\t\tdpsResultElem.textContent = '';\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdpsResultElem.textContent = `${partyDps.toFixed(1)} DPS`;\n\n\t\t\tif (!referenceData) {\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformatDeltaTextElem(referenceDeltaElem, referenceDps, partyDps, 1);\n\t\t});\n\n\t\tthis.rootElem.ondragstart = event => {\n\t\t\tif (event.target == this.rootElem) {\n\t\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\t\t\t\tthis.raidPicker.setDragParty(this);\n\t\t\t}\n\t\t};\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => {\n\t\t\tevent.preventDefault();\n\t\t};\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tconst srcPartyPicker = this.raidPicker.currentDragParty!;\n\n\t\t\t\tfor (let i = 0; i < MAX_PARTY_SIZE; i++) {\n\t\t\t\t\tconst srcPlayerPicker = srcPartyPicker.playerPickers[i]!;\n\t\t\t\t\tconst dstPlayerPicker = this.playerPickers[i]!;\n\n\t\t\t\t\tconst srcPlayer = srcPlayerPicker.player;\n\t\t\t\t\tconst dstPlayer = dstPlayerPicker.player;\n\n\t\t\t\t\tsrcPlayerPicker.setPlayer(eventID, dstPlayer, DragType.Swap);\n\t\t\t\t\tdstPlayerPicker.setPlayer(eventID, srcPlayer, DragType.Swap);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.raidPicker.clearDragParty();\n\t\t};\n\t}\n}\n\nexport class PlayerPicker extends Component {\n\t// Index of this player within its party (0-4).\n\treadonly index: number;\n\n\t// Index of this player within the whole raid (0-24).\n\treadonly raidIndex: number;\n\n\tplayer: Player<any> | null;\n\n\treadonly partyPicker: PartyPicker;\n\treadonly raidPicker: RaidPicker;\n\n\tprivate labelElem: HTMLElement | null;\n\tprivate iconElem: HTMLImageElement | null;\n\tprivate nameElem: HTMLInputElement | null;\n\tprivate resultsElem: HTMLElement | null;\n\tprivate dpsResultElem: HTMLElement | null;\n\tprivate referenceDeltaElem: HTMLElement | null;\n\n\tconstructor(parent: HTMLElement, partyPicker: PartyPicker, index: number) {\n\t\tsuper(parent, 'player-picker-root');\n\t\tthis.index = index;\n\t\tthis.raidIndex = partyPicker.index * MAX_PARTY_SIZE + index;\n\t\tthis.player = null;\n\t\tthis.partyPicker = partyPicker;\n\t\tthis.raidPicker = partyPicker.raidPicker;\n\n\t\tthis.labelElem = null;\n\t\tthis.iconElem = null;\n\t\tthis.nameElem = null;\n\t\tthis.resultsElem = null;\n\t\tthis.dpsResultElem = null;\n\t\tthis.referenceDeltaElem = null;\n\n\t\tthis.rootElem.classList.add('player');\n\n\t\tthis.partyPicker.party.compChangeEmitter.on(eventID => {\n\t\t\tconst newPlayer = this.partyPicker.party.getPlayer(this.index);\n\t\t\tif (newPlayer != this.player)\n\t\t\t\tthis.setPlayer(eventID, newPlayer, DragType.None);\n\t\t});\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst playerDps = currentData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\n\t\t\tif (this.player) {\n\t\t\t\tthis.resultsElem?.classList.remove('hide');\n\t\t\t\t(this.dpsResultElem as HTMLElement).textContent = `${playerDps.toFixed(1)} DPS`;\n\n\t\t\t\tif (referenceData)\n\t\t\t\t\tformatDeltaTextElem(this.referenceDeltaElem as HTMLElement, referenceDps, playerDps, 1);\n\t\t\t}\n\t\t});\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => event.preventDefault();\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar dropData = event.dataTransfer!.getData(\"text/plain\");\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.raidPicker.currentDragPlayer == null && dropData.length == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex == this.raidIndex) {\n\t\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst dragType = this.raidPicker.currentDragType;\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t\t\tconst fromPlayerPicker = this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);\n\t\t\t\t\tif (dragType == DragType.Swap) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, this.player, dragType);\n\t\t\t\t\t} else if (dragType == DragType.Move) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, null, dragType);\n\t\t\t\t\t}\n\t\t\t\t} else if (this.raidPicker.currentDragPlayer == null) {\n\t\t\t\t\t// This would be a copy from another window.\n\t\t\t\t\tconst binary = atob(dropData);\n\t\t\t\t\tconst bytes = new Uint8Array(binary.length);\n\t\t\t\t\tfor (let i = 0; i < bytes.length; i++) {\n\t\t\t\t\t\tbytes[i] = binary.charCodeAt(i);\n\t\t\t\t\t}\n\t\t\t\t\tconst playerProto = PlayerProto.fromBinary(bytes);\n\n\t\t\t\t\tvar localPlayer = new Player(playerToSpec(playerProto), this.raidPicker.raidSimUI.sim);\n\t\t\t\t\tlocalPlayer.fromProto(eventID, playerProto);\n\t\t\t\t\tthis.raidPicker.currentDragPlayer = localPlayer;\n\t\t\t\t}\n\n\t\t\t\tif (dragType == DragType.Copy) {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer!.clone(eventID), dragType);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer, dragType);\n\t\t\t\t}\n\n\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t});\n\t\t};\n\n\t\tthis.update();\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: Player<any> | null, dragType: DragType) {\n\t\tif (newPlayer == this.player) {\n\t\t\treturn;\n\t\t}\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.player = newPlayer;\n\t\t\tif (newPlayer) {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\n\t\t\t\tif (dragType == DragType.New) {\n\t\t\t\t\tapplyNewPlayerAssignments(eventID, newPlayer, this.raidPicker.raid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\t\t\t\tthis.partyPicker.party.compChangeEmitter.emit(eventID);\n\t\t\t}\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tif (this.player == null) {\n\t\t\tthis.rootElem.className = 'player-picker-root player';\n\t\t\tthis.rootElem.innerHTML = '';\n\n\t\t\tthis.labelElem = null;\n\t\t\tthis.iconElem = null;\n\t\t\tthis.nameElem = null;\n\t\t\tthis.resultsElem = null;\n\t\t\tthis.dpsResultElem = null;\n\t\t\tthis.referenceDeltaElem = null;\n\t\t} else {\n\t\t\tconst classCssClass = cssClassForClass(this.player.getClass());\n\n\t\t\tthis.rootElem.className = `player-picker-root player bg-${classCssClass}-dampened`;\n\t\t\tthis.rootElem.innerHTML = `\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t<img class=\"player-icon\" src=\"${this.player.getSpecIcon()}\" draggable=\"true\" />\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass=\"player-name text-${classCssClass}\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue=\"${this.player.getName()}\"\n\t\t\t\t\t\t\tspellcheck=\"false\"\n\t\t\t\t\t\t\tmaxlength=\"15\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class=\"player-results hide\">\n\t\t\t\t\t\t\t<span class=\"player-results-dps\"></span>\n\t\t\t\t\t\t\t<span class=\"player-results-reference-delta\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"player-options\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-edit\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Edit\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-edit fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-copy link-warning\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Drag to Copy\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-copy fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-delete link-danger\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Delete\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-times fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`;\n\n\t\t\tthis.labelElem = this.rootElem.querySelector('.player-label') as HTMLElement;\n\t\t\tthis.iconElem = this.rootElem.querySelector('.player-icon') as HTMLImageElement;\n\t\t\tthis.nameElem = this.rootElem.querySelector('.player-name') as HTMLInputElement;\n\t\t\tthis.resultsElem = this.rootElem.querySelector('.player-results') as HTMLElement;\n\t\t\tthis.dpsResultElem = this.rootElem.querySelector('.player-results-dps') as HTMLElement;\n\t\t\tthis.referenceDeltaElem = this.rootElem.querySelector('.player-results-reference-delta') as HTMLElement;\n\n\t\t\tthis.bindPlayerEvents();\n\t\t}\n\t}\n\n\tprivate bindPlayerEvents() {\n\t\tthis.nameElem?.addEventListener('input', _event => {\n\t\t\tthis.player?.setName(TypedEvent.nextEventID(), this.nameElem?.value || '');\n\t\t});\n\n\t\tthis.nameElem?.addEventListener('mousedown', _event => {\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'false')\n\t\t})\n\n\t\tthis.nameElem?.addEventListener('mouseup', _event => {\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'true')\n\t\t})\n\n\t\tconst emptyName = 'Unnamed';\n\t\tthis.nameElem?.addEventListener('focusout', _event => {\n\t\t\tif (this.nameElem && !this.nameElem.value) {\n\t\t\t\tthis.nameElem.value = emptyName;\n\t\t\t\tthis.player?.setName(TypedEvent.nextEventID(), emptyName);\n\t\t\t}\n\t\t});\n\n\t\tconst dragStart = (event: DragEvent, type: DragType) => {\n\t\t\tif (this.player == null) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\n\t\t\tif (this.player) {\n\t\t\t\tvar playerDataProto = this.player.toProto(true);\n\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", btoa(String.fromCharCode(...PlayerProto.toBinary(playerDataProto))));\n\t\t\t}\n\n\t\t\tthis.raidPicker.setDragPlayer(this.player, this.raidIndex, type);\n\t\t};\n\n\t\tconst editElem = this.rootElem.querySelector('.player-edit') as HTMLElement;\n\t\tconst copyElem = this.rootElem.querySelector('.player-copy') as HTMLElement;\n\t\tconst deleteElem = this.rootElem.querySelector('.player-delete') as HTMLElement;\n\n\t\tconst _editTooltip = Tooltip.getOrCreateInstance(editElem);\n\t\tconst _copyTooltip = Tooltip.getOrCreateInstance(copyElem);\n\t\tconst deleteTooltip = Tooltip.getOrCreateInstance(deleteElem);\n\n\t\t(this.iconElem as HTMLElement).ondragstart = event => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Swap)\n\t\t}\n\t\teditElem.onclick = _event => {\n\t\t\tnew PlayerEditorModal(this.player as Player<any>);\n\t\t};\n\t\tcopyElem.ondragstart = event => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Copy);\n\t\t}\n\t\tdeleteElem.onclick = _event => {\n\t\t\tdeleteTooltip.hide();\n\t\t\tthis.setPlayer(TypedEvent.nextEventID(), null, DragType.None);\n\t\t}\n\t}\n}\n\nclass PlayerEditorModal extends BaseModal {\n\tconstructor(player: Player<any>) {\n\t\tsuper(document.body, 'player-editor-modal', {\n\t\t\tcloseButton: { fixed: true },\n\t\t\theader: false\n\t\t});\n\n\t\tthis.rootElem.id = 'playerEditorModal';\n\t\tthis.body.insertAdjacentHTML('beforeend', `\n\t\t\t<div class=\"player-editor within-raid-sim\"></div>\n\t\t`);\n\n\t\tconst editorRoot = this.rootElem.getElementsByClassName('player-editor')[0] as HTMLElement;\n\t\tconst _individualSim = specSimFactories[player.spec]!(editorRoot, player);\n\t}\n}\n\nclass NewPlayerPicker extends Component {\n\treadonly raidPicker: RaidPicker;\n\n\tconstructor(parent: HTMLElement, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'new-player-picker-root');\n\t\tthis.raidPicker = raidPicker;\n\n\t\tgetEnumValues(Class).forEach(wowClass => {\n\t\t\tif (wowClass == Class.ClassUnknown) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingPresets = playerPresets.filter(preset => specToClass[preset.spec] == wowClass);\n\t\t\tif (matchingPresets.length == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst classPresetsContainer = document.createElement('div');\n\t\t\tclassPresetsContainer.classList.add('class-presets-container', `bg-${cssClassForClass(wowClass as Class)}-dampened`);\n\t\t\tthis.rootElem.appendChild(classPresetsContainer);\n\n\t\t\tmatchingPresets.forEach(matchingPreset => {\n\t\t\t\tconst presetElemFragment = document.createElement('fragment');\n\t\t\t\tpresetElemFragment.innerHTML = `\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"${matchingPreset.tooltip}\"\n\t\t\t\t\t\tdata-bs-html=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class=\"preset-picker-icon player-icon\" src=\"${matchingPreset.iconUrl}\"/>\n\t\t\t\t\t</a>\n\t\t\t\t`\n\t\t\t\tconst presetElem = presetElemFragment.children[0] as HTMLElement;\n\t\t\t\tclassPresetsContainer.appendChild(presetElem);\n\n\t\t\t\tTooltip.getOrCreateInstance(presetElem);\n\n\t\t\t\tpresetElem.ondragstart = event => {\n\t\t\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\t\tconst dragImage = new Image();\n\t\t\t\t\t\tdragImage.src = matchingPreset.iconUrl;\n\t\t\t\t\t\tevent.dataTransfer!.setDragImage(dragImage, 30, 30);\n\t\t\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", \"\");\n\t\t\t\t\t\tevent.dataTransfer!.dropEffect = 'copy';\n\n\t\t\t\t\t\tconst newPlayer = new Player(matchingPreset.spec, this.raidPicker.raid.sim);\n\t\t\t\t\t\tnewPlayer.applySharedDefaults(eventID);\n\t\t\t\t\t\tnewPlayer.setRace(eventID, matchingPreset.defaultFactionRaces[this.raidPicker.getCurrentFaction()]);\n\t\t\t\t\t\tnewPlayer.setTalentsString(eventID, matchingPreset.talents.talentsString);\n\t\t\t\t\t\tnewPlayer.setGlyphs(eventID, matchingPreset.talents.glyphs || Glyphs.create());\n\t\t\t\t\t\tnewPlayer.setSpecOptions(eventID, matchingPreset.specOptions);\n\t\t\t\t\t\tnewPlayer.setConsumes(eventID, matchingPreset.consumes);\n\t\t\t\t\t\tnewPlayer.setName(eventID, matchingPreset.defaultName);\n\t\t\t\t\t\tnewPlayer.setProfession1(eventID, matchingPreset.otherDefaults?.profession1 || Profession.Engineering);\n\t\t\t\t\t\tnewPlayer.setProfession2(eventID, matchingPreset.otherDefaults?.profession2 || Profession.Jewelcrafting);\n\t\t\t\t\t\tnewPlayer.setDistanceFromTarget(eventID, matchingPreset.otherDefaults?.distanceFromTarget || 0);\n\n\t\t\t\t\t\t// Need to wait because the gear might not be loaded yet.\n\t\t\t\t\t\tthis.raidPicker.raid.sim.waitForInit().then(() => {\n\t\t\t\t\t\t\tconst phase = Math.min(this.raidPicker.getCurrentPhase(), LATEST_PHASE_WITH_ALL_PRESETS);\n\t\t\t\t\t\t\tconst gearSet = matchingPreset.defaultGear[this.raidPicker.getCurrentFaction()][phase];\n\t\t\t\t\t\t\tnewPlayer.setGear(eventID, this.raidPicker.raid.sim.db.lookupEquipmentSpec(gearSet));\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.raidPicker.setDragPlayer(newPlayer, NEW_PLAYER, DragType.New);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction applyNewPlayerAssignments(eventID: EventID, newPlayer: Player<any>, raid: Raid) {\n\tif (isTankSpec(newPlayer.spec)) {\n\t\tconst tanks = raid.getTanks();\n\t\tconst emptyIdx = tanks.findIndex(tank => raid.getPlayerFromUnitReference(tank) == null);\n\t\tif (emptyIdx == -1) {\n\t\t\tif (tanks.length < 3) {\n\t\t\t\traid.setTanks(eventID, tanks.concat([newPlayer.makeUnitReference()]));\n\t\t\t}\n\t\t} else {\n\t\t\ttanks[emptyIdx] = newPlayer.makeUnitReference();\n\t\t\traid.setTanks(eventID, tanks);\n\t\t}\n\t}\n\n\t// Spec-specific assignments. For most cases, default to buffing self.\n\tif (newPlayer.spec == Spec.SpecBalanceDruid) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as BalanceDruidOptions;\n\t\tnewOptions.innervateTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.spec == Spec.SpecSmitePriest) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as SmitePriestOptions;\n\t\tnewOptions.powerInfusionTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.spec == Spec.SpecMage) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as MageOptions;\n\t\tnewOptions.focusMagicTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import {\n\tClass,\n\tRaidBuffs,\n\tSpec,\n} from '../core/proto/common.js';\nimport { Component } from '../core/components/component.js';\nimport { Player } from \"../core/player.js\";\nimport { Raid } from \"../core/raid.js\";\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport {\n\tClassSpecs,\n\tSpecTalents,\n\tspecToClass,\n\tisTankSpec,\n\tisHealingSpec,\n\tisMeleeDpsSpec,\n\tisRangedDpsSpec,\n\ttextCssClassForClass,\n} from '../core/proto_utils/utils.js';\nimport { sum } from '../core/utils.js';\n\nimport { Hunter_Rotation_StingType as HunterStingType, Hunter_Options_PetType as HunterPetType } from '../core/proto/hunter.js';\nimport { PaladinAura } from '../core/proto/paladin.js';\nimport { Rogue_Rotation_Frequency as ExposeFrequency } from '../core/proto/rogue.js';\nimport { AirTotem, EarthTotem, FireTotem, WaterTotem } from '../core/proto/shaman.js';\nimport { Warlock_Rotation_Curse as WarlockCurse, Warlock_Options_Summon as WarlockSummon } from '../core/proto/warlock.js';\nimport { WarriorShout, Warrior_Rotation_SunderArmor as SunderArmor } from '../core/proto/warrior.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { Tooltip } from 'bootstrap';\n\ninterface RaidStatsOptions {\n\tsections: Array<RaidStatsSectionOptions>,\n}\n\ninterface RaidStatsSectionOptions {\n\tlabel: string,\n\tcategories: Array<RaidStatsCategoryOptions>,\n}\n\ninterface RaidStatsCategoryOptions {\n\tlabel: string,\n\teffects: Array<RaidStatsEffectOptions>,\n}\n\ntype PlayerProvider = { class?: Class, condition: (player: Player<any>) => boolean };\ntype RaidProvider = (raid: Raid) => boolean;\n\ninterface RaidStatsEffectOptions {\n\tlabel: string,\n\tactionId?: ActionId,\n\tplayerData?: PlayerProvider,\n\traidData?: RaidProvider,\n}\n\nexport class RaidStats extends Component {\n\tprivate readonly categories: Array<RaidStatsCategory>;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-stats');\n\n\t\tlet categories: Array<RaidStatsCategory> = [];\n\t\tRAID_STATS_OPTIONS.sections.forEach(section => {\n\t\t\tconst sectionElem = document.createElement('div');\n\t\t\tsectionElem.classList.add('raid-stats-section');\n\t\t\tthis.rootElem.appendChild(sectionElem);\n\t\t\tsectionElem.innerHTML = `\n\t\t\t\t<div class=\"raid-stats-section-header\">\n\t\t\t\t\t<label class=\"raid-stats-section-label form-label\">${section.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"raid-stats-section-content\"></div>\n\t\t\t`;\n\t\t\tconst contentElem = sectionElem.getElementsByClassName('raid-stats-section-content')[0] as HTMLDivElement;\n\n\t\t\tsection.categories.forEach(categoryOptions => {\n\t\t\t\tcategories.push(new RaidStatsCategory(contentElem, raidSimUI, categoryOptions));\n\t\t\t});\n\t\t});\n\t\tthis.categories = categories;\n\n\t\traidSimUI.changeEmitter.on(eventID => this.categories.forEach(c => c.update()));\n\t}\n}\n\nclass RaidStatsCategory extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsCategoryOptions;\n\tprivate readonly effects: Array<RaidStatsEffect>;\n\tprivate readonly counterElem: HTMLElement;\n\tprivate readonly tooltipElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsCategoryOptions) {\n\t\tsuper(parent, 'raid-stats-category-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a href=\"javascript:void(0)\" role=\"button\" class=\"raid-stats-category\">\n\t\t\t\t<span class=\"raid-stats-category-counter\"></span>\n\t\t\t\t<span class=\"raid-stats-category-label\">${options.label}</span>\n\t\t\t</a>\n\t\t`;\n\n\t\tthis.counterElem = this.rootElem.querySelector('.raid-stats-category-counter') as HTMLElement;\n\t\tthis.tooltipElem = document.createElement('div');\n\t\tthis.tooltipElem.innerHTML = `\n\t\t\t<label class=\"raid-stats-category-label\">${options.label}</label>\n\t\t`\n\n\t\tthis.effects = options.effects.map(opt => new RaidStatsEffect(this.tooltipElem, raidSimUI, opt));\n\n\t\tif (options.effects.length != 1 || options.effects[0].playerData?.class) {\n\t\t\tconst statsLink = this.rootElem.querySelector('.raid-stats-category') as HTMLElement;\n\n\t\t\t// Using the title option here because outerHTML sanitizes and filters out the img src options\n\t\t\tTooltip.getOrCreateInstance(statsLink, {\n\t\t\t\tcustomClass: 'raid-stats-category-tooltip',\n\t\t\t\thtml: true,\n\t\t\t\tplacement: 'right',\n\t\t\t\ttitle: this.tooltipElem,\n\t\t\t})\n\t\t}\n\t}\n\n\tupdate() {\n\t\tthis.effects.forEach(effect => effect.update());\n\n\t\tconst total = sum(this.effects.map(effect => effect.count));\n\t\tthis.counterElem.textContent = String(total);\n\n\t\tconst statsLink = this.rootElem.querySelector('.raid-stats-category') as HTMLElement;\n\n\t\tif (total == 0) {\n\t\t\tstatsLink?.classList.remove('active');\n\t\t} else {\n\t\t\tstatsLink?.classList.add('active');\n\t\t}\n\t}\n}\n\nclass RaidStatsEffect extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsEffectOptions;\n\tprivate readonly counterElem: HTMLElement;\n\n\tcurPlayers: Array<Player<any>>;\n\tcount: number;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsEffectOptions) {\n\t\tsuper(parent, 'raid-stats-effect');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.curPlayers = [];\n\t\tthis.count = 0;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<span class=\"raid-stats-effect-counter\"></span>\n\t\t\t<img class=\"raid-stats-effect-icon\"></img>\n\t\t\t<span class=\"raid-stats-effect-label\">${options.label}</span>\n\t\t`;\n\t\tthis.counterElem = this.rootElem.querySelector('.raid-stats-effect-counter') as HTMLElement;\n\n\t\tif (this.options.playerData?.class) {\n\t\t\tconst labelElem = this.rootElem.querySelector('.raid-stats-effect-label') as HTMLElement;\n\t\t\tconst playerCssClass = textCssClassForClass(this.options.playerData.class);\n\t\t\tlabelElem.classList.add(playerCssClass);\n\t\t}\n\n\t\tconst iconElem = this.rootElem.querySelector('.raid-stats-effect-icon') as HTMLImageElement;\n\t\tif (options.actionId) {\n\t\t\toptions.actionId.fill().then(actionId => iconElem.src = actionId.iconUrl);\n\t\t} else {\n\t\t\ticonElem.remove();\n\t\t}\n\t}\n\n\tupdate() {\n\t\tif (this.options.playerData) {\n\t\t\tthis.curPlayers = this.raidSimUI.getActivePlayers().filter(p => this.options.playerData!.condition(p));\n\t\t}\n\n\t\tconst raidData = this.options.raidData && this.options.raidData(this.raidSimUI.sim.raid);\n\n\t\tthis.count = this.curPlayers.length + (raidData ? 1 : 0);\n\t\tthis.counterElem.textContent = String(this.count);\n\t\tif (this.count == 0) {\n\t\t\tthis.rootElem.classList.remove('active');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('active');\n\t\t}\n\t}\n}\n\nfunction negateIf(val: boolean, cond: boolean): boolean {\n\treturn cond ? !val : val;\n}\n\nfunction playerClass<T extends Class>(clazz: T, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalentInternal<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, negateTalent: boolean, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz)\n\t\t\t\t&& negateIf(Boolean((player.getTalents() as any)[talentName]), negateTalent)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalent<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, false, extraCondition);\n}\nfunction playerClassAndMissingTalent<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, true, extraCondition);\n}\nfunction playerSpecAndTalentInternal<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, negateTalent: boolean, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: specToClass[spec],\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isSpec(spec)\n\t\t\t\t&& negateIf(Boolean((player.getTalents() as any)[talentName]), negateTalent)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerSpecAndTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, false, extraCondition);\n}\nfunction playerSpecAndMissingTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, true, extraCondition);\n}\n\nfunction raidBuff(buffName: keyof RaidBuffs): RaidProvider {\n\treturn (raid: Raid): boolean => {\n\t\treturn Boolean(raid.getBuffs()[buffName]);\n\t};\n}\n\nconst RAID_STATS_OPTIONS: RaidStatsOptions = {\n\tsections: [\n\t\t{\n\t\t\tlabel: 'Roles',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Tanks',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Tanks',\n\t\t\t\t\t\t\tplayerData: { condition: player => isTankSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Healers',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Healers',\n\t\t\t\t\t\t\tplayerData: { condition: player => isHealingSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Melee',\n\t\t\t\t\t\t\tplayerData: { condition: player => isMeleeDpsSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Ranged',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Ranged',\n\t\t\t\t\t\t\tplayerData: { condition: player => isRangedDpsSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'Buffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(2825),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getSpecOptions().bloodlust),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stats',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Gift of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(17051),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'improvedMarkOfTheWild'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Gift of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48470),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassDruid, 'improvedMarkOfTheWild'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Drums of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(49634),\n\t\t\t\t\t\t\traidData: raidBuff('drumsOfTheWild'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stats %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Kings',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(25898),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Drums of Forgotten Kings',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(49633),\n\t\t\t\t\t\t\traidData: raidBuff('drumsOfForgottenKings'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Sanctuary',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(25899),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Armor',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Devotion Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20140),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'improvedDevotionAura', player => player.getSpecOptions().aura == PaladinAura.DevotionAura),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Devotion Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48942),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPaladin, 'improvedDevotionAura', player => player.getSpecOptions().aura == PaladinAura.DevotionAura),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Stoneskin Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16293),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'guardianTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StoneskinTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Stoneskin Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58753),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'guardianTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StoneskinTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Protection',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(43468),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfProtection'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stamina',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Power Word Fortitude',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(14767),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'improvedPowerWordFortitude'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Power Word Fortitude',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48161),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPriest, 'improvedPowerWordFortitude'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Stamina',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(37094),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfStamina'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Str + Agi',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Strength of Earth Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(52456),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'enhancingTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StrengthOfEarthTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Strength of Earth Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58643),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'enhancingTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StrengthOfEarthTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Horn of Winter',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57623),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDeathknight),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Strength',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(43466),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfStrength'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Agility',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(43464),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfAgility'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Intellect',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Arcane Brilliance',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(43002),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassMage),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Fel Intelligence',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54038),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Fel Intelligence',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57567),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Intellect',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(37092),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfIntellect'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spirit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Divine Spirit',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48073),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPriest),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Fel Intelligence',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54038),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Fel Intelligence',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57567),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Spirit',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(37098),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfSpirit'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Pwr',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Blessing of Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20045),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48934),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Battle Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12861),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutBattle),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Battle Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47436),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutBattle),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Pwr %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Abomination\\'s Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53138),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'abominationsMight'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Unleashed Rage',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(30809),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'unleashedRage'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Trueshot Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(19506),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'trueshotAura'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Damage %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Sanctified Retribution',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(31869),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'sanctifiedRetribution'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Arcane Empowerment',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(31583),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'arcaneEmpowerment'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Ferocious Inspiration',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(34460),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'ferociousInspiration'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Mit %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Renewed Hope',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57472),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'renewedHope'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing Of Sanctuary',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(25899),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Vigilance',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(50720),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'vigilance'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Haste %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Swift Retribution',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53648),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'swiftRetribution'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Moonkin Form',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48396),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'improvedMoonkinForm'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'MP5',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Blessing of Wisdom',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20245),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'improvedBlessingOfWisdom'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Wisdom',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48938),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPaladin, 'improvedBlessingOfWisdom'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Mana Spring Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16206),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'restorativeTotems', player => player.getSpecOptions().totems?.water == WaterTotem.ManaSpringTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mana Spring Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58774),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'restorativeTotems', player => player.getSpecOptions().totems?.water == WaterTotem.ManaSpringTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Leader of the Pack',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(17007),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'leaderOfThePack'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Rampage',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29801),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'rampage'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee Haste',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Icy Talons',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(55610),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'improvedIcyTalons'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Windfury Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29193),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'improvedWindfuryTotem', player => player.getSpecOptions().totems?.air == AirTotem.WindfuryTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Windfury Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(65990),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'improvedWindfuryTotem', player => player.getSpecOptions().totems?.air == AirTotem.WindfuryTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Power',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demonic Pact',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47240),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'demonicPact'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Totem of Wrath',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57722),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'totemOfWrath', player => player.getSpecOptions().totems?.fire == FireTotem.TotemOfWrath),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Flametongue Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58656),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getSpecOptions().totems?.fire == FireTotem.FlametongueTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Moonkin Form',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(24907),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'moonkinForm'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Elemental Oath',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51470),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'elementalOath'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Haste',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Wrath of Air Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(3738),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getSpecOptions().totems?.air == AirTotem.WrathOfAirTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Health',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Commanding Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12861),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutCommanding),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Commanding Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47440),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutCommanding),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Imp',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(18696),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedImp', player => player.getSpecOptions().summon == WarlockSummon.Imp),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blood Pact',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47982),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedImp', player => player.getSpecOptions().summon == WarlockSummon.Imp),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Replenishment',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Vampiric Touch',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48160),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecShadowPriest, 'vampiricTouch'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Judgements of the Wise',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(31878),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecRetributionPaladin, 'judgementsOfTheWise'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Hunting Party',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53292),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecHunter, 'huntingParty'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Soul Leech',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54118),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecWarlock, 'improvedSoulLeech'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Enduring Winter',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(44561),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecMage, 'enduringWinter'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'External Buffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Innervate',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Innervate',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29166),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(10060),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'powerInfusion'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Focus Magic',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Focus Magic',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54648),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'focusMagic'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Tricks of the Trade',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Tricks of the Trade',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57933),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Unholy Frenzy',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Unholy Frenzy',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(49016),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'hysteria'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Pain Suppression',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Pain Suppression',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(33206),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'painSuppression'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Divine Guardian',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Divine Guardian',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53530),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'divineGuardian'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'DPS Debuffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Major ArP',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Sunder Armor',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47467),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarrior, player => player.isSpec(Spec.SpecProtectionWarrior) || (player as Player<Spec.SpecWarrior>).getRotation().sunderArmor == SunderArmor.SunderArmorMaintain),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Expose Armor',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(8647),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue, player => player.getRotation().exposeArmorFrequency == ExposeFrequency.Maintain),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Acid Spit',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(55754),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Worm),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Minor ArP',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Faerie Fire',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(770),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => player.spec == Spec.SpecFeralTankDruid ||\n\t\t\t\t\t\t\t\t(player.spec != Spec.SpecRestorationDruid && (player as Player<Spec.SpecBalanceDruid | Spec.SpecFeralDruid>).getRotation().maintainFaerieFire)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Curse of Weakness',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(50511),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock, player => player.getRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Sting',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(56631),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Wasp),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Spore Cloud',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53598),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Bat),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Phys Vuln',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blood Frenzy',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29859),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'bloodFrenzy'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Savage Combat',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58413),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'savageCombat'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Bleed',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mangle',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16862),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => [Spec.SpecFeralDruid, Spec.SpecFeralTankDruid].includes(player.spec)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Trauma',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(46855),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'trauma'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Stampede',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57393),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Rhino),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Totem of Wrath',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(30706),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'totemOfWrath', player => player.getSpecOptions().totems?.fire == FireTotem.TotemOfWrath),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Heart of the Crusader',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20337),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'heartOfTheCrusader', player => [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin].includes(player.spec)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Master Poisoner',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58410),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'masterPoisoner'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Shadow Bolt',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(17803),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedShadowBolt'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Scorch',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12873),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'improvedScorch', player => {\n\t\t\t\t\t\t\t\treturn player.getTalentTree() == 1 && player.getRotation().maintainImprovedScorch;\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Winter\\'s Chill',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(28593),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'wintersChill', player => player.getTalentTree() == 2),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Hit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Misery',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(33198),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecShadowPriest, 'misery'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Faerie Fire',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(33602),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'improvedFaerieFire'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Dmg',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Ebon Plaguebringer',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51161),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'ebonPlaguebringer'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Earth and Moon',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48511),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'earthAndMoon'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Curse of Elements',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47865),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock, player => player.getRotation().curse == WarlockCurse.Elements),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'Mitigation Debuffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Pwr',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Vindication',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(26016),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'vindication', player => [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin].includes(player.spec)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Demoralizing Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12879),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedDemoralizingShout', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainDemoShout) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().demoShoutChoice != 0)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47437),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedDemoralizingShout', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainDemoShout) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().demoShoutChoice != 0)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Demoralizing Roar',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16862),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecFeralTankDruid, 'feralAggression', player => player.getRotation().maintainDemoralizingRoar),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Roar',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48560),\n\t\t\t\t\t\t\tplayerData: playerSpecAndMissingTalent(Spec.SpecFeralTankDruid, 'feralAggression', player => player.getRotation().maintainDemoralizingRoar),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Curse of Weakness',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(18180),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedCurseOfWeakness', player => player.getRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Curse of Weakness',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(50511),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedCurseOfWeakness', player => player.getRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Screech',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(55487),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.CarrionBird),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Speed',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Thunder Clap',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12666),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedThunderClap', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainThunderClap) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().thunderClapChoice != 0)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Thunder Clap',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47502),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedThunderClap', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainThunderClap) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().thunderClapChoice != 0)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Frost Fever',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51456),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'improvedIcyTouch'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Frost Fever',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51456),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassDeathknight, 'improvedIcyTouch'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Judgements of the Just',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53696),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'judgementsOfTheJust'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Infected Wounds',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48485),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'infectedWounds', player => [Spec.SpecFeralDruid, Spec.SpecFeralTankDruid].includes(player.spec)),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Miss',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Insect Swarm',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(65855),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'insectSwarm'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scorpid Sting',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(3043),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getRotation().sting == HunterStingType.ScorpidSting),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t]\n};\n","import { RaidPicker } from \"./raid_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\nimport { RaidStats } from \"./raid_stats\";\nimport { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\nimport { BlessingsAssignments, SavedRaid } from \"../core/proto/ui\";\nimport { EventID, TypedEvent } from \"../core/typed_event\";\nimport { Raid as RaidProto } from \"../core/proto/api\";\n\nexport class RaidTab extends SimTab {\n\tprotected simUI: RaidSimUI;\n\n\treadonly leftPanel: HTMLElement;\n\treadonly rightPanel: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parentElem, simUI, { identifier: 'raid-tab', title: 'Raid' });\n\t\tthis.simUI = simUI;\n\n\t\tthis.rootElem.classList.add('active', 'show')\n\n\t\tthis.leftPanel = document.createElement('div');\n\t\tthis.leftPanel.classList.add('raid-tab-left', 'tab-panel-left');\n\n\t\tthis.rightPanel = document.createElement('div');\n\t\tthis.rightPanel.classList.add('raid-tab-right', 'tab-panel-right');\n\n\t\tthis.contentContainer.appendChild(this.leftPanel);\n\t\tthis.contentContainer.appendChild(this.rightPanel);\n\n\t\tthis.buildTabContent();\n\t}\n\n\tprotected buildTabContent() {\n\t\tthis.simUI.raidPicker = new RaidPicker(this.leftPanel, this.simUI);\n\t\tnew RaidStats(this.leftPanel, this.simUI);\n\n\t\tconst savedRaidManager = new SavedDataManager<RaidSimUI, SavedRaid>(this.rightPanel, this.simUI, {\n\t\t\tlabel: 'Raid',\n\t\t\theader: { title: 'Saved Raid Groups' },\n\t\t\tstorageKey: this.simUI.getSavedRaidStorageKey(),\n\t\t\tgetData: (raidSimUI: RaidSimUI) => SavedRaid.create({\n\t\t\t\traid: this.simUI.sim.raid.toProto(),\n\t\t\t\tblessings: this.simUI.blessingsPicker!.getAssignments(),\n\t\t\t\tfaction: this.simUI.sim.getFaction(),\n\t\t\t\tphase: this.simUI.sim.getPhase(),\n\t\t\t}),\n\t\t\tsetData: (eventID: EventID, raidSimUI: RaidSimUI, newRaid: SavedRaid) => {\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tthis.simUI.sim.raid.fromProto(eventID, newRaid.raid || RaidProto.create());\n\t\t\t\t\tthis.simUI.blessingsPicker!.setAssignments(eventID, newRaid.blessings || BlessingsAssignments.create());\n\t\t\t\t\tif (newRaid.faction) this.simUI.sim.setFaction(eventID, newRaid.faction);\n\t\t\t\t\tif (newRaid.phase) this.simUI.sim.setPhase(eventID, newRaid.phase);\n\t\t\t\t});\n\t\t\t},\n\t\t\tchangeEmitters: [this.simUI.changeEmitter, this.simUI.sim.changeEmitter],\n\t\t\tequals: (a: SavedRaid, b: SavedRaid) => {\n\t\t\t\treturn SavedRaid.equals(a, b);\n\t\t\t},\n\t\t\ttoJson: (a: SavedRaid) => SavedRaid.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedRaid.fromJson(obj),\n\t\t}\n\t\t);\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedRaidManager.loadUserData();\n\t\t});\n\t}\n}\n","import { Input, InputConfig } from '../components/input.js';\nimport { Player } from '../player.js';\nimport { Raid } from '../raid.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { UnitReference } from '../proto/common.js';\nimport { emptyUnitReference, cssClassForClass } from '../proto_utils/utils.js';\n\nexport interface UnitReferencePickerConfig<ModObject> extends InputConfig<ModObject, UnitReference> {\n\tnoTargetLabel: string,\n\tcompChangeEmitter: TypedEvent<void>,\n}\n\ninterface OptionElemOptions {\n\tisDropdown?: boolean,\n\tplayer: Player<any> | null,\n}\n\n// Dropdown menu for selecting a player.\nexport class UnitReferencePicker<ModObject> extends Input<ModObject, UnitReference> {\n\tprivate readonly config: UnitReferencePickerConfig<ModObject>;\n\tprivate readonly raid: Raid;\n\n\tprivate curPlayer: Player<any> | null;\n\tprivate curUnitReference: UnitReference;\n\n\tprivate currentOptions: Array<OptionElemOptions>;\n\n\tprivate readonly buttonElem: HTMLElement;\n\tprivate readonly dropdownElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raid: Raid, modObj: ModObject, config: UnitReferencePickerConfig<ModObject>) {\n\t\tsuper(parent, 'raid-target-picker-root', modObj, config);\n\t\tthis.rootElem.classList.add('dropdown');\n\t\tthis.config = config;\n\t\tthis.raid = raid;\n\t\tthis.curPlayer = this.raid.getPlayerFromUnitReference(config.getValue(modObj));\n\t\tthis.curUnitReference = this.getInputValue();\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a\n\t\t\t\tclass=\"raid-target-picker-button\"\n\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\trole=\"button\"\n\t\t\t\tdata-bs-toggle=\"dropdown\"\n\t\t\t></a>\n\t\t\t<div class=\"dropdown-menu\"></div>\n    `;\n\n\t\tthis.buttonElem = this.rootElem.querySelector('.raid-target-picker-button') as HTMLElement;\n\t\tthis.dropdownElem = this.rootElem.querySelector('.dropdown-menu') as HTMLElement;\n\n\t\tthis.buttonElem.addEventListener('click', event => event.preventDefault());\n\n\t\tthis.currentOptions = [];\n\t\tthis.updateOptions(TypedEvent.nextEventID());\n\t\tconfig.compChangeEmitter.on(eventID => this.updateOptions(eventID));\n\n\t\tthis.init();\n\t}\n\n\tprivate makeTargetOptions(): Array<OptionElemOptions> {\n\t\tconst unassignedOption = { player: null, isDropdown: true }\n\t\tconst playerOptions = this.raid.getPlayers().filter(player => player != null).map(player => {\n\t\t\treturn { player: player, isDropdown: true }\n\t\t});\n\n\t\treturn [unassignedOption, ...playerOptions]\n\t}\n\n\tprivate updateOptions(eventID: EventID) {\n\t\tthis.currentOptions = this.makeTargetOptions();\n\n\t\tthis.dropdownElem.innerHTML = '';\n\t\tthis.currentOptions.forEach(option => this.dropdownElem.appendChild(this.makeOption(option)));\n\n\t\tconst prevUnitReference = this.curUnitReference;\n\t\tthis.curUnitReference = this.getInputValue();\n\t\tif (!UnitReference.equals(prevUnitReference, this.curUnitReference)) {\n\t\t\tthis.inputChanged(eventID);\n\t\t} else {\n\t\t\tthis.setInputValue(this.curUnitReference);\n\t\t}\n\t}\n\n\tprivate makeOption(data: OptionElemOptions): HTMLElement {\n\t\tconst option = UnitReferencePicker.makeOptionElem(data);\n\n\t\toption.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.curPlayer = data.player;\n\t\t\tthis.curUnitReference = this.getInputValue();\n\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\n\t\treturn option;\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.buttonElem;\n\t}\n\n\tgetInputValue(): UnitReference {\n\t\tif (this.curPlayer) {\n\t\t\treturn this.curPlayer.makeUnitReference();\n\t\t} else {\n\t\t\treturn emptyUnitReference();\n\t\t}\n\t}\n\n\tsetInputValue(newValue: UnitReference) {\n\t\tthis.curUnitReference = UnitReference.clone(newValue);\n\t\tthis.curPlayer = this.raid.getPlayerFromUnitReference(this.curUnitReference);\n\n\t\tconst optionData = this.currentOptions.find(optionData => optionData.player == this.curPlayer);\n\n\t\tif (optionData)\n\t\t\tthis.buttonElem.innerHTML = UnitReferencePicker.makeOptionElem({ player: optionData.player }).outerHTML;\n\t}\n\n\tstatic makeOptionElem(data: OptionElemOptions): HTMLElement {\n\t\tconst classCssClass = data.player ? cssClassForClass(data.player.getClass()) : '';\n\t\tlet playerFragment = document.createElement('fragment');\n\n\t\tplayerFragment.innerHTML = `\n\t\t\t<div class=\"player ${classCssClass ? `bg-${classCssClass}-dampened` : ''}\">\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t${data.player ? `<img class=\"player-icon\" src=\"${data.player.getSpecIcon()}\" draggable=\"false\"/>` : ''}\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<span class=\"player-name ${classCssClass ? `text-${classCssClass}` : ''}\">\n\t\t\t\t\t\t\t${data.player ? data.player.getName() : 'Unassigned'}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`\n\n\t\tif (data.isDropdown) {\n\t\t\tplayerFragment.innerHTML = `\n\t\t\t\t<a class=\"dropdown-option\" href=\"javascript:void(0) role=\"button\">${playerFragment.innerHTML}</a>\n\t\t\t`\n\t\t}\n\n\t\treturn playerFragment.children[0] as HTMLElement;\n\t}\n}\n","import { Component } from '../core/components/component.js';\nimport { UnitReferencePicker } from '../core/components/raid_target_picker.js';\n\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport { Class, UnitReference, Spec } from '../core/proto/common.js';\nimport { emptyUnitReference } from '../core/proto_utils/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { PriestTalents } from 'ui/core/proto/priest.js';\nimport { DeathknightTalents } from 'ui/core/proto/deathknight.js';\n\nexport class AssignmentsPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly innervatesPicker: InnervatesPicker;\n\tprivate readonly powerInfusionsPicker: PowerInfusionsPicker;\n\tprivate readonly tricksOfTheTradesPicker: TricksOfTheTradesPicker;\n\tprivate readonly unholyFrenzyPicker: UnholyFrenzyPicker;\n\tprivate readonly focusMagicsPicker: FocusMagicsPicker;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assignments-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tthis.innervatesPicker = new InnervatesPicker(this.rootElem, raidSimUI);\n\t\tthis.powerInfusionsPicker = new PowerInfusionsPicker(this.rootElem, raidSimUI);\n\t\tthis.tricksOfTheTradesPicker = new TricksOfTheTradesPicker(this.rootElem, raidSimUI);\n\t\tthis.unholyFrenzyPicker = new UnholyFrenzyPicker(this.rootElem, raidSimUI);\n\t\tthis.focusMagicsPicker = new FocusMagicsPicker(this.rootElem, raidSimUI);\n\t}\n}\n\ninterface AssignmentTargetPicker {\n\tplayer: Player<any>,\n\ttargetPicker: UnitReferencePicker<Player<any>>,\n\ttargetPlayer: Player<any> | null;\n};\n\nabstract class AssignedBuffPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly playersContainer: HTMLElement;\n\n\tprivate targetPickers: Array<AssignmentTargetPicker>;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assigned-buff-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.targetPickers = [];\n\n\t\tthis.playersContainer = document.createElement('div');\n\t\tthis.playersContainer.classList.add('assigned-buff-container');\n\t\tthis.rootElem.appendChild(this.playersContainer);\n\n\t\tthis.raidSimUI.changeEmitter.on(eventID => this.update());\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tthis.playersContainer.innerHTML = `\n\t\t\t<label class=\"assignmented-buff-label form-label\">${this.getTitle()}</label>\n\t\t`\n\n\t\tconst sourcePlayers = this.getSourcePlayers();\n\t\tif (sourcePlayers.length == 0)\n\t\t\tthis.rootElem.classList.add('hide');\n\t\telse\n\t\t\tthis.rootElem.classList.remove('hide');\n\n\t\tthis.targetPickers = sourcePlayers.map((sourcePlayer, sourcePlayerIndex) => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('assigned-buff-player', 'input-inline');\n\t\t\tthis.playersContainer.appendChild(row);\n\n\t\t\tlet sourceElem = document.createElement('div');\n\t\t\tsourceElem.classList.add('raid-target-picker-root');\n\t\t\tsourceElem.appendChild(\n\t\t\t\tUnitReferencePicker.makeOptionElem({ player: sourcePlayer, isDropdown: false })\n\t\t\t);\n\t\t\trow.appendChild(sourceElem);\n\n\t\t\tconst arrow = document.createElement('i');\n\t\t\tarrow.classList.add('assigned-buff-arrow', 'fa', 'fa-arrow-right');\n\t\t\trow.appendChild(arrow);\n\n\t\t\tconst raidTargetPicker: UnitReferencePicker<Player<any>> | null = new UnitReferencePicker<Player<any>>(row, this.raidSimUI.sim.raid, sourcePlayer, {\n\t\t\t\textraCssClasses: ['assigned-buff-target-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: this.raidSimUI.sim.raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (player: Player<any>) => player.specOptionsChangeEmitter,\n\t\t\t\tgetValue: (player: Player<any>) => this.getPlayerValue(player),\n\t\t\t\tsetValue: (eventID: EventID, player: Player<any>, newValue: UnitReference) => this.setPlayerValue(eventID, player, newValue),\n\t\t\t});\n\n\t\t\tconst targetPickerData = {\n\t\t\t\tplayer: sourcePlayer,\n\t\t\t\ttargetPicker: raidTargetPicker!,\n\t\t\t\ttargetPlayer: this.raidSimUI.sim.raid.getPlayerFromUnitReference(raidTargetPicker!.getInputValue()),\n\t\t\t};\n\n\t\t\traidTargetPicker!.changeEmitter.on(eventID => {\n\t\t\t\ttargetPickerData.targetPlayer = this.raidSimUI.sim.raid.getPlayerFromUnitReference(raidTargetPicker!.getInputValue());\n\t\t\t});\n\n\t\t\treturn targetPickerData;\n\t\t});\n\t}\n\n\tabstract getTitle(): string;\n\tabstract getSourcePlayers(): Array<Player<any>>;\n\n\tabstract getPlayerValue(player: Player<any>): UnitReference;\n\tabstract setPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference): void;\n}\n\nclass InnervatesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Innervate';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDruid));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecBalanceDruid>).getSpecOptions().innervateTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecBalanceDruid>).getSpecOptions();\n\t\tnewOptions.innervateTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass PowerInfusionsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Power Infusion';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassPriest) && (player.getTalents() as PriestTalents).powerInfusion);\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecSmitePriest>).getSpecOptions().powerInfusionTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecSmitePriest>).getSpecOptions();\n\t\tnewOptions.powerInfusionTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass TricksOfTheTradesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Tricks of the Trade';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassRogue));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecRogue>).getSpecOptions().tricksOfTheTradeTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecRogue>).getSpecOptions();\n\t\tnewOptions.tricksOfTheTradeTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass UnholyFrenzyPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Unholy Frenzy';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDeathknight) && (player.getTalents() as DeathknightTalents).hysteria);\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecDeathknight>).getSpecOptions().unholyFrenzyTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecDeathknight>).getSpecOptions();\n\t\tnewOptions.unholyFrenzyTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass FocusMagicsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Focus Magic';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassMage));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecMage>).getSpecOptions().focusMagicTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecMage>).getSpecOptions();\n\t\tnewOptions.focusMagicTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { IconEnumPicker } from '../core/components/icon_enum_picker';\n\nimport { memeSpecs } from '../core/launched_sims';\nimport { EventID, TypedEvent } from '../core/typed_event';\n\nimport { Class, Spec } from '../core/proto/common';\nimport { Blessings } from '../core/proto/paladin';\nimport { BlessingsAssignments } from '../core/proto/ui';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport {\n\tmakeDefaultBlessings,\n\tclassColors,\n\tnaturalSpecOrder,\n\tspecNames,\n\ttitleIcons,\n} from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\nimport { implementedSpecs } from './presets';\nimport { Tooltip } from 'bootstrap';\n\nconst MAX_PALADINS = 4;\n\nexport class BlessingsPicker extends Component {\n\treadonly simUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly pickers: Array<Array<IconEnumPicker<this, Blessings>>> = [];\n\n\tprivate assignments: BlessingsAssignments;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'blessings-picker-root');\n\t\tthis.simUI = raidSimUI;\n\t\tthis.assignments = BlessingsAssignments.clone(makeDefaultBlessings(4));\n\n\t\tconst specs = naturalSpecOrder\n\t\t\t.filter(spec => implementedSpecs.includes(spec))\n\t\t\t.filter(spec => !memeSpecs.includes(spec));\n\t\tconst paladinIndexes = [...Array(MAX_PALADINS).keys()];\n\n\t\tspecs.map(spec => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('blessings-picker-row');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\trow.append(this.buildSpecIcon(spec));\n\n\t\t\tconst container = document.createElement('div');\n\t\t\tcontainer.classList.add('blessings-picker-container');\n\t\t\trow.appendChild(container);\n\n\t\t\tpaladinIndexes.forEach(paladinIdx => {\n\t\t\t\tif (!this.pickers[paladinIdx])\n\t\t\t\t\tthis.pickers.push([]);\n\n\t\t\t\tconst blessingPicker = new IconEnumPicker(container, this, {\n\t\t\t\t\textraCssClasses: ['blessing-picker'],\n\t\t\t\t\tnumColumns: 1,\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ color: classColors[Class.ClassPaladin], value: Blessings.BlessingUnknown },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(25898), value: Blessings.BlessingOfKings },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(48934), value: Blessings.BlessingOfMight },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(48938), value: Blessings.BlessingOfWisdom },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(25899), value: Blessings.BlessingOfSanctuary },\n\t\t\t\t\t],\n\t\t\t\t\tequals: (a: Blessings, b: Blessings) => a == b,\n\t\t\t\t\tzeroValue: Blessings.BlessingUnknown,\n\t\t\t\t\tenableWhen: (_picker: BlessingsPicker) => {\n\t\t\t\t\t\tconst numPaladins = Math.min(this.simUI.getClassCount(Class.ClassPaladin), MAX_PALADINS);\n\t\t\t\t\t\treturn paladinIdx < numPaladins;\n\t\t\t\t\t},\n\t\t\t\t\tchangedEvent: (picker: BlessingsPicker) => picker.changeEmitter,\n\t\t\t\t\tgetValue: (picker: BlessingsPicker) => picker.assignments.paladins[paladinIdx]?.blessings[spec] || Blessings.BlessingUnknown,\n\t\t\t\t\tsetValue: (eventID: EventID, picker: BlessingsPicker, newValue: number) => {\n\t\t\t\t\t\tconst currentValue = picker.assignments.paladins[paladinIdx].blessings[spec];\n\t\t\t\t\t\tif (currentValue != newValue) {\n\t\t\t\t\t\t\tpicker.assignments.paladins[paladinIdx].blessings[spec] = newValue;\n\t\t\t\t\t\t\tthis.changeEmitter.emit(eventID);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.pickers[paladinIdx].push(blessingPicker);\n\t\t\t});\n\n\t\t\treturn row;\n\t\t});\n\n\t\tthis.updatePickers()\n\t\tthis.simUI.compChangeEmitter.on(_eventID => this.updatePickers());\n\t}\n\n\tprivate updatePickers() {\n\t\tfor (let i = 0; i < MAX_PALADINS; i++) {\n\t\t\tthis.pickers[i].forEach(picker => picker.update());\n\t\t}\n\t}\n\n\tprivate buildSpecIcon(spec: Spec): HTMLElement {\n\t\tlet fragment = document.createElement('fragment');\n\t\tfragment.innerHTML = `\n\t\t\t<div class=\"blessings-picker-spec\">\n\t\t\t\t<img\n\t\t\t\t\tsrc=\"${titleIcons[spec]}\"\n\t\t\t\t\tclass=\"blessings-spec-icon\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst icon = fragment.querySelector('.blessings-spec-icon') as HTMLElement;\n\t\tTooltip.getOrCreateInstance(icon, { title: specNames[spec]});\n\n\t\treturn fragment.children[0] as HTMLElement;\n\t}\n\n\tgetAssignments(): BlessingsAssignments {\n\t\t// Defensive copy.\n\t\treturn BlessingsAssignments.clone(this.assignments);\n\t}\n\n\tsetAssignments(eventID: EventID, newAssignments: BlessingsAssignments) {\n\t\tthis.assignments = BlessingsAssignments.clone(newAssignments);\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { UnitReferencePicker } from '../core/components/raid_target_picker';\n\nimport { Raid } from '../core/raid';\nimport { EventID } from '../core/typed_event';\n\nimport { UnitReference } from '../core/proto/common';\nimport { emptyUnitReference } from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\n\nconst MAX_TANKS = 4;\n\nexport class TanksPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'tanks-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tconst raid = this.raidSimUI.sim.raid;\n\n\t\tfor (let i = 0; i < MAX_TANKS; i++) {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('tank-picker-row', 'input-inline');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\tconst labelElem = document.createElement('label');\n\t\t\tlabelElem.textContent = i == 0 ? 'Main Tank' : `Tank ${i + 1}`;\n\t\t\tlabelElem.classList.add('tank-picker-label', 'form-label');\n\t\t\trow.appendChild(labelElem);\n\n\t\t\tnew UnitReferencePicker<Raid>(row, raid, raid, {\n\t\t\t\textraCssClasses: ['tank-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (raid: Raid) => raid.tanksChangeEmitter,\n\t\t\t\tgetValue: (raid: Raid) => raid.getTanks()[i] || emptyUnitReference(),\n\t\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: UnitReference) => {\n\t\t\t\t\tconst tanks = raid.getTanks();\n\t\t\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\t\t\tif (!tanks[j]) {\n\t\t\t\t\t\t\ttanks.push(emptyUnitReference());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttanks[i] = newValue;\n\t\t\t\t\traid.setTanks(eventID, tanks);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n}\n","import { ContentBlock } from \"../core/components/content_block\";\nimport { EncounterPicker } from \"../core/components/encounter_picker\";\nimport { IconPicker } from \"../core/components/icon_picker\";\nimport { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\n\nimport { Encounter } from \"../core/encounter\";\nimport { Raid } from \"../core/raid\";\nimport { EventID } from \"../core/typed_event\";\n\nimport { RaidBuffs } from \"../core/proto/common\";\nimport { SavedEncounter } from \"../core/proto/ui\";\nimport { ActionId } from \"../core/proto_utils/action_id\";\n\nimport { AssignmentsPicker } from \"./assignments_picker\";\nimport { BlessingsPicker } from \"./blessings_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\nimport { TanksPicker } from \"./tanks_picker\";\n\nimport * as Tooltips from \"../core/constants/tooltips.js\";\n\nexport class SettingsTab extends SimTab {\n\tprotected simUI: RaidSimUI;\n\n\treadonly leftPanel: HTMLElement;\n\treadonly rightPanel: HTMLElement;\n\n\treadonly column1: HTMLElement = this.buildColumn(1, 'raid-settings-col');\n\treadonly column2: HTMLElement = this.buildColumn(2, 'raid-settings-col');\n\treadonly column3: HTMLElement = this.buildColumn(3, 'raid-settings-col');\n\n\tconstructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parentElem, simUI, { identifier: 'raid-settings-tab', title: 'Settings' });\n\t\tthis.simUI = simUI;\n\n\t\tthis.leftPanel = document.createElement('div');\n\t\tthis.leftPanel.classList.add('raid-settings-tab-left', 'tab-panel-left');\n\n\t\tthis.leftPanel.appendChild(this.column1);\n\t\tthis.leftPanel.appendChild(this.column2);\n\t\tthis.leftPanel.appendChild(this.column3);\n\n\t\tthis.rightPanel = document.createElement('div');\n\t\tthis.rightPanel.classList.add('raid-settings-tab-right', 'tab-panel-right', 'within-raid-sim-hide');\n\n\t\tthis.contentContainer.appendChild(this.leftPanel);\n\t\tthis.contentContainer.appendChild(this.rightPanel);\n\n\t\tthis.buildTabContent();\n\t}\n\n\tprotected buildTabContent() {\n\t\tthis.buildEncounterSettings();\n\t\tthis.buildConsumesSettings();\n\t\tthis.buildOtherSettings();\n\n\t\tthis.buildTankSettings();\n\t\tthis.buildAssignmentSettings();\n\n\t\tthis.buildBlessingsPicker();\n\t\tthis.buildSavedDataPickers();\n\t}\n\n\tprivate buildEncounterSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column1, 'encounter-settings', {\n\t\t\theader: { title: 'Encounter' }\n\t\t});\n\n\t\tnew EncounterPicker(contentBlock.bodyElement, this.simUI.sim.encounter, { showExecuteProportion: true }, this.simUI);\n\t}\n\n\tprivate buildConsumesSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column1, 'consumes-settings', {\n\t\t\theader: { title: 'Consumables' }\n\t\t});\n\n\t\tlet container = document.createElement('div');\n\t\tcontainer.classList.add('consumes-container');\n\n\t\tcontentBlock.bodyElement.appendChild(container);\n\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37094), 'scrollOfStamina'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43466), 'scrollOfStrength'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43464), 'scrollOfAgility'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37092), 'scrollOfIntellect'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37098), 'scrollOfSpirit'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43468), 'scrollOfProtection'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49633), 'drumsOfForgottenKings'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49634), 'drumsOfTheWild');\n\t}\n\n\tprivate buildOtherSettings() {\n\t\t// const raid = this.simUI.sim.raid;\n\t\t// const contentBlock = new ContentBlock(this.column1, 'other-settings', {\n\t\t//   header: {title: 'Other'}\n\t\t// });\n\n\t\t// new BooleanPicker(contentBlock.bodyElement, this.simUI.sim.raid, {\n\t\t// \tlabel: 'Stagger Stormstrikes',\n\t\t// \tlabelTooltip: 'When there are multiple Enhancement Shaman in the raid, causes them to coordinate their Stormstrike casts for optimal SS charge usage.',\n\t\t// \tchangedEvent: (raid: Raid) => raid.staggerStormstrikesChangeEmitter,\n\t\t// \tgetValue: (raid: Raid) => raid.getStaggerStormstrikes(),\n\t\t// \tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t// \t\traid.setStaggerStormstrikes(eventID, newValue);\n\t\t// \t},\n\t\t// });\n\t}\n\n\tprivate buildTankSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'tanks-settings', {\n\t\t\theader: { title: 'Tanks' }\n\t\t});\n\n\t\tnew TanksPicker(contentBlock.bodyElement, this.simUI);\n\t}\n\n\tprivate buildAssignmentSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'assignments-settings', {\n\t\t\theader: { title: 'External Buffs' }\n\t\t});\n\n\t\tnew AssignmentsPicker(contentBlock.bodyElement, this.simUI);\n\t}\n\n\tprivate buildBlessingsPicker() {\n\t\tconst contentBlock = new ContentBlock(this.column3, 'blessings-settings', {\n\t\t\theader: { title: 'Blessings', tooltip: Tooltips.BLESSINGS_SECTION }\n\t\t});\n\n\t\tthis.simUI.blessingsPicker = new BlessingsPicker(contentBlock.bodyElement, this.simUI);\n\t\tthis.simUI.blessingsPicker.changeEmitter.on(eventID => this.simUI.changeEmitter.emit(eventID));\n\t}\n\n\tprivate buildSavedDataPickers() {\n\t\tconst savedEncounterManager = new SavedDataManager<Encounter, SavedEncounter>(this.rightPanel, this.simUI.sim.encounter, {\n\t\t\tlabel: 'Encounter',\n\t\t\theader: { title: 'Saved Encounters' },\n\t\t\tstorageKey: this.simUI.getSavedEncounterStorageKey(),\n\t\t\tgetData: (encounter: Encounter) => SavedEncounter.create({ encounter: encounter.toProto() }),\n\t\t\tsetData: (eventID: EventID, encounter: Encounter, newEncounter: SavedEncounter) => encounter.fromProto(eventID, newEncounter.encounter!),\n\t\t\tchangeEmitters: [this.simUI.sim.encounter.changeEmitter],\n\t\t\tequals: (a: SavedEncounter, b: SavedEncounter) => SavedEncounter.equals(a, b),\n\t\t\ttoJson: (a: SavedEncounter) => SavedEncounter.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedEncounter.fromJson(obj),\n\t\t});\n\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedEncounterManager.loadUserData();\n\t\t});\n\t}\n\n\tprivate makeBooleanRaidIconBuffInput(parent: HTMLElement, id: ActionId, field: keyof RaidBuffs): IconPicker<Raid, boolean> {\n\t\tconst raid = this.simUI.sim.raid;\n\n\t\treturn new IconPicker<Raid, boolean>(parent, raid, {\n\t\t\tid: id,\n\t\t\tstates: 2,\n\t\t\tchangedEvent: (raid: Raid) => raid.buffsChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getBuffs()[field] as unknown as boolean,\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t\t\tconst newBuffs = raid.getBuffs();\n\t\t\t\t(newBuffs[field] as unknown as boolean) = newValue;\n\t\t\t\traid.setBuffs(eventID, newBuffs);\n\t\t\t},\n\t\t});\n\t}\n}\n","import { Exporter } from '../core/components/exporters';\nimport { Importer } from '../core/components/importers';\nimport { RaidSimSettings } from '../core/proto/ui';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { Party as PartyProto, Player as PlayerProto, Raid as RaidProto } from '../core/proto/api';\nimport {\n\tClass,\n\tEncounter as EncounterProto,\n\tEquipmentSpec,\n\tFaction,\n\tItemSpec,\n\tProfession,\n\tRace,\n\tUnitReference,\n\tSpec,\n\tTarget as TargetProto,\n\tUnitReference_Type,\n} from '../core/proto/common';\nimport { professionNames, raceNames } from '../core/proto_utils/names';\nimport {\n\tDruidSpecs,\n\tDeathknightSpecs,\n\tPriestSpecs,\n\tRogueSpecs,\n\tSpecOptions,\n\tgetTalentTreePoints,\n\tmakeDefaultBlessings,\n\traceToFaction,\n\tisTankSpec,\n\tplayerToSpec,\n} from '../core/proto_utils/utils';\nimport { MAX_NUM_PARTIES } from '../core/raid';\nimport { RaidSimPreset } from '../core/individual_sim_ui';\nimport { Player } from '../core/player';\nimport { Encounter } from '../core/encounter';\nimport { bucket, distinct } from '../core/utils';\n\nimport { playerPresets } from './presets';\nimport { RaidSimUI } from './raid_sim_ui';\n\nexport class RaidJsonImporter extends Importer {\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'JSON Import', true);\n\t\tthis.simUI = simUI;\n\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tonImport(data: string) {\n\t\tconst settings = RaidSimSettings.fromJsonString(data, { ignoreUnknownFields: true });\n\t\tthis.simUI.fromProto(TypedEvent.nextEventID(), settings);\n\t\tthis.close();\n\t}\n}\n\nexport class RaidJsonExporter extends Exporter {\n\tprivate readonly simUI: RaidSimUI;\n\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'JSON Export', true);\n\t\tthis.simUI = simUI;\n\t\tthis.init();\n\t}\n\n\tgetData(): string {\n\t\treturn JSON.stringify(RaidSimSettings.toJson(this.simUI.toProto()), null, 2);\n\t}\n}\n\nexport class RaidWCLImporter extends Importer {\n\n\tprivate queryCounter: number = 0;\n\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'WCL Import', false);\n\t\tthis.simUI = simUI;\n\t\tthis.textElem.classList.add('small-textarea');\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Heroic Presence, Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tprivate token: string = '';\n\tprivate async getWCLBearerToken(): Promise<string> {\n\t\tif (this.token == '') {\n\t\t\tconst response = await fetch('https://classic.warcraftlogs.com/oauth/token', {\n\t\t\t\t'method': 'POST',\n\t\t\t\t'headers': {\n\t\t\t\t\t'Authorization': 'Basic ' + btoa('963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3'),\n\t\t\t\t},\n\t\t\t\tbody: new URLSearchParams({\n\t\t\t\t\t'grant_type': 'client_credentials',\n\t\t\t\t}),\n\t\t\t})\n\t\t\tconst json = await response.json();\n\t\t\tthis.token = json.access_token;\n\t\t}\n\t\treturn this.token;\n\t}\n\n\tprivate async queryWCL(query: string): Promise<any> {\n\t\tconst token = await this.getWCLBearerToken();\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Authorization': `Bearer ${token}`,\n\t\t\t'Accept': 'application/json',\n\t\t};\n\n\t\tconst queryURL = `https://classic.warcraftlogs.com/api/v2/client?query=${query}`;\n\t\tthis.queryCounter++;\n\n\t\t// Query WCL\n\t\tconst res = await fetch(encodeURI(queryURL), {\n\t\t\t'method': 'GET',\n\t\t\t'headers': headers,\n\t\t});\n\n\t\tconst result = await res.json();\n\t\tif (result?.errors?.length) {\n\t\t\tconst errorStr = result.errors.map((e: any) => e.message).join('\\n');\n\t\t\tthrow new Error(`GraphQL error: ${errorStr}\\n\\nQuery: ${query}`);\n\t\t} else {\n\t\t\tconsole.debug(`WCL query: ${query}\\n\\nResult: ${JSON.stringify(result)}`);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async parseURL(url: string): Promise<wclUrlData> {\n\t\tconst match = url.match(/classic\\.warcraftlogs\\.com\\/reports\\/([a-zA-Z0-9:]+)\\/?(#.*fight=((\\d+)|(last)))?/);\n\t\tif (!match) {\n\t\t\tthrow new Error(`Invalid WCL URL ${url}, must look like \"classic.warcraftlogs.com/reports/XXXX\"`);\n\t\t}\n\n\t\tconst urlData = {\n\t\t\treportID: match[1],\n\t\t\tfightID: '',\n\t\t}\n\n\t\t// If the URL has a Fight ID in it, use it\n\t\tif (match[2] && match[3] && match[3] != 'last') {\n\t\t\turlData.fightID = match[3];\n\t\t} else {\n\t\t\t// Make a separate query to get the corresponding ReportFights\n\t\t\tconst fightDataQuery = `{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst fightData = await this.queryWCL(fightDataQuery);\n\t\t\tconst fights = fightData.data.reportData.report.fights;\n\n\t\t\tif (match[3] == 'last') {\n\t\t\t\turlData.fightID = String(fights[fights.length - 1].id)\n\t\t\t} else {\n\t\t\t\t// Default to using the first Fight\n\t\t\t\turlData.fightID = String(fights[0].id);\n\t\t\t}\n\t\t}\n\n\t\tconsole.debug(`Importing WCL report: ${JSON.stringify(urlData)}`);\n\t\treturn urlData;\n\t}\n\n\tprivate async getRateLimit(): Promise<wclRateLimitData> {\n\t\tconst query = `{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }`;\n\t\tconst result = await this.queryWCL(query);\n\t\tconst data = result['data']['rateLimitData'] as wclRateLimitData;\n\t\treturn data;\n\t}\n\n\tasync onImport(importLink: string) {\n\t\tthis.importButton.disabled = true;\n\t\tthis.rootElem.style.cursor = 'wait';\n\t\ttry {\n\t\t\tawait this.doImport(importLink);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\talert('Failed import from WCL: ' + error);\n\t\t}\n\t\tthis.importButton.disabled = false\n\t\tthis.rootElem.style.removeProperty('cursor');\n\t}\n\n\tasync doImport(importLink: string) {\n\t\tif (!importLink.length) {\n\t\t\tthrow new Error('No import link provided!');\n\t\t}\n\n\t\tconst urlData = await this.parseURL(importLink);\n\t\tconst _rateLimit = await this.getRateLimit();\n\n\t\t// Schema for WCL API here: https://www.warcraftlogs.com/v2-api-docs/warcraft/\n\t\t// WCL charges us 1 'point' for each subquery we issue within the request. So\n\t\t// by using filter expressions we can combine our queries together, to spend\n\t\t// fewer points.\n\t\tconst reportDataQuery = `{\n\t\t\treportData {\n\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${urlData.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${urlData.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${urlData.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: \"${[racialSpells, professionSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${urlData.fightID}], dataType:Casts, filterExpression: \"${[externalCDSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${urlData.fightID}], dataType:Healing, filterExpression: \"${[samePartyHealingSpells, otherPartyHealingSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${urlData.fightID}], dataType:Resources, filterExpression: \"ability.id = 39609\", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`;\n\t\tconst reportData = await this.queryWCL(reportDataQuery);\n\n\t\t// Process the report data.\n\t\tconst wclData = reportData.data.reportData.report; // TODO: Typings?\n\t\tconst playerData: wclPlayer[] = wclData.playerDetails.data.entries;\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tconst wclPlayers = playerData.map(wclPlayer => new WCLSimPlayer(wclPlayer, this.simUI, eventID));\n\t\t\tthis.inferRace(eventID, wclData, wclPlayers);\n\t\t\tthis.inferProfessions(eventID, wclData, wclPlayers);\n\t\t\tthis.inferAssignments(eventID, wclData, wclPlayers);\n\t\t\tthis.inferPartyComposition(eventID, wclData, wclPlayers);\n\t\t\tconst numPaladins = wclPlayers.filter(player => player.player.getClass() == Class.ClassPaladin).length;\n\t\t\tconst settings = RaidSimSettings.create({\n\t\t\t\tencounter: this.getEncounterProto(wclData),\n\t\t\t\traid: this.getRaidProto(wclPlayers),\n\t\t\t\tblessings: makeDefaultBlessings(numPaladins),\n\t\t\t});\n\n\t\t\t// Clear the raid out to avoid any taint issues.\n\t\t\tthis.simUI.clearRaid(eventID);\n\t\t\tthis.simUI.fromProto(eventID, settings);\n\t\t});\n\n\t\tthis.close();\n\t}\n\n\tprivate inferRace(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\twclPlayers.forEach(p => p.player.setRace(eventID, Race.RaceUnknown));\n\n\t\t// If defined in log, use that faction. Otherwise default to UI setting.\n\t\tlet faction = (wclData.guild?.faction?.id || this.simUI.raidPicker?.getCurrentFaction() || Faction.Horde) as Faction;\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && sourcePlayer.player.getRace() != Race.RaceDraenei) {\n\t\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames.get(Race.RaceDraenei)} from Heroic Presence aura event`);\n\t\t\t\t\t\tsourcePlayer.player.setRace(eventID, Race.RaceDraenei);\n\t\t\t\t\t\tfaction = Faction.Alliance;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tracialSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames.get(spell.race)} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.player.setRace(eventID, spell.race);\n\t\t\t\t\tfaction = raceToFaction[spell.race];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(p => {\n\t\t\tif (p.player.getRace() == Race.RaceUnknown) {\n\t\t\t\tp.player.setRace(eventID, p.preset.defaultFactionRaces[faction]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate inferProfessions(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tprofessionSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer && !sourcePlayer.inferredProfessions.includes(spell.profession)) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has profession ${professionNames.get(spell.profession)} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.inferredProfessions.push(spell.profession);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(player => {\n\t\t\tlet professions = distinct(player.inferredProfessions.concat(player.player.getGear().getProfessionRequirements()));\n\t\t\tif (professions.length == 0) {\n\t\t\t\tprofessions = [Profession.Engineering, Profession.Jewelcrafting];\n\t\t\t} else if (professions.length == 1) {\n\t\t\t\tif (professions[0] != Profession.Engineering) {\n\t\t\t\t\tprofessions.push(Profession.Engineering);\n\t\t\t\t} else {\n\t\t\t\t\tprofessions.push(Profession.Jewelcrafting);\n\t\t\t\t}\n\t\t\t}\n\t\t\tplayer.player.setProfessions(eventID, professions);\n\t\t});\n\t}\n\n\tprivate inferAssignments(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.fightCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\texternalCDSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer && sourcePlayer.player.getClass() == spell.class) {\n\t\t\t\t\tconst specOptions = spell.applyFunc(sourcePlayer.player, targetPlayer.toUnitReference());\n\t\t\t\t\tsourcePlayer.player.setSpecOptions(eventID, specOptions);\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} is targeting ${targetPlayer.name} with ${spell.name} from cast event`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// Assigns the raidIndex field for all players.\n\tprivate inferPartyComposition(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst setPlayersInParty = (player1: WCLSimPlayer, player2: WCLSimPlayer, reason: string) => {\n\t\t\tif (player1.addPlayerInParty(player2) || player2.addPlayerInParty(player1)) {\n\t\t\t\tconsole.log(`Inferring players ${player1.name} and ${player2.name} in same party from ${reason} event`);\n\t\t\t}\n\t\t};\n\n\t\tconst healEventsBySpellId = bucket(wclData.fightHealEvents.data as Array<wclHealEvent>, event => String(event.abilityGameID));\n\n\t\t// These spells only affect players in the same party as the caster.\n\t\tsamePartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, spell.name);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Prayer of Healing is a bit different, we can infer that players who are targeted at the same time are in a group.\n\t\totherPartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tconst spellEventsByTimestamp = bucket(spellEvents, event => String(event.timestamp) + String(event.sourceID));\n\t\t\tfor (const [_timestamp, eventsAtTime] of Object.entries(spellEventsByTimestamp)) {\n\t\t\t\tconst spellTargets = eventsAtTime.map(event => wclPlayers.find(player => player.id == event.targetID));\n\t\t\t\tfor (let i = 0; i < spellTargets.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < spellTargets.length; j++) {\n\t\t\t\t\t\tif (i != j && spellTargets[i] && spellTargets[j]) {\n\t\t\t\t\t\t\tsetPlayersInParty(spellTargets[i]!, spellTargets[j]!, spell.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == combatantInfo.sourceID);\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, 'Heroic Presence');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\t// Assign players with same-group inferences.\n\t\tlet inferredPlayers = wclPlayers.filter(player => player.playersInParty.length > 0);\n\t\tlet nextEmptyPartyIdx = 0;\n\t\twhile (inferredPlayers.length > 0) {\n\t\t\t// Find all the players in the same party as the first player.\n\t\t\tlet partyMembers = [inferredPlayers[0]].concat(inferredPlayers[0].playersInParty);\n\t\t\tlet numMembers = 0;\n\t\t\twhile (partyMembers.length != numMembers) {\n\t\t\t\tnumMembers = partyMembers.length;\n\t\t\t\tpartyMembers = distinct(partyMembers.map(member => [member].concat(member.playersInParty)).flat());\n\t\t\t}\n\n\t\t\t// Assign these members to an empty party.\n\t\t\tconst partyIdx = nextEmptyPartyIdx;\n\t\t\tnextEmptyPartyIdx++;\n\t\t\tpartyMembers.forEach((member, i) => {\n\t\t\t\tmember.raidIndex = partyIdx * 5 + i;\n\t\t\t});\n\n\t\t\tinferredPlayers = inferredPlayers.filter(player => !partyMembers.includes(player));\n\t\t}\n\n\t\t// Assign remaining players into open slots.\n\t\tconst allRaidIndexes = [...Array(40).keys()];\n\t\tconst nextFreeIndex = () => allRaidIndexes.find(idx => !wclPlayers.some(p => p.raidIndex == idx)) ?? -1;\n\t\twclPlayers\n\t\t\t.filter(player => player.raidIndex == -1)\n\t\t\t.forEach(player => {\n\t\t\t\tconst nextIdx = nextFreeIndex();\n\t\t\t\tif (nextIdx == -1) {\n\t\t\t\t\tthrow new Error('Invalid next idx');\n\t\t\t\t}\n\t\t\t\tplayer.raidIndex = nextIdx;\n\t\t\t});\n\t}\n\n\tprivate getEncounterProto(wclData: any): EncounterProto {\n\t\tconst fight: { startTime: number, endTime: number, id: number, name: string } = wclData.fights[0];\n\n\t\tconst encounter = EncounterProto.create({\n\t\t\tduration: (fight.endTime - fight.startTime) / 1000,\n\t\t\ttargets: [],\n\t\t});\n\n\t\t// Use the preset encounter if it exists.\n\t\tlet closestEncounterPreset = this.simUI.sim.db.getAllPresetEncounters().find(enc => enc.path.includes(fight.name));\n\t\tif (closestEncounterPreset && closestEncounterPreset.targets.length) {\n\t\t\tclosestEncounterPreset.targets\n\t\t\t\t.map(mob => mob.target as TargetProto)\n\t\t\t\t.filter(target => target !== undefined)\n\t\t\t\t.forEach(target => encounter.targets.push(target));\n\t\t}\n\n\t\t// Build a manual target list if no preset encounter exists.\n\t\tif (encounter.targets.length === 0) {\n\t\t\tencounter.targets.push(Encounter.defaultTargetProto());\n\t\t}\n\n\t\treturn encounter;\n\t}\n\n\tprivate getRaidProto(wclPlayers: WCLSimPlayer[]): RaidProto {\n\t\tconst raid = RaidProto.create({\n\t\t\tparties: [...new Array(MAX_NUM_PARTIES).keys()].map(_party => PartyProto.create({\n\t\t\t\tplayers: [...new Array(5).keys()].map(_player => PlayerProto.create()),\n\t\t\t})),\n\t\t});\n\n\t\twclPlayers\n\t\t\t.forEach(player => {\n\t\t\t\tconst positionInParty = player.raidIndex % 5;\n\t\t\t\tconst partyIdx = (player.raidIndex - positionInParty) / 5;\n\t\t\t\tconst playerProto = player.player.toProto();\n\t\t\t\traid.parties[partyIdx].players[positionInParty] = playerProto;\n\n\t\t\t\tif (isTankSpec(playerToSpec(playerProto))) {\n\t\t\t\t\traid.tanks.push(player.toUnitReference());\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn raid;\n\t}\n}\n\nclass WCLSimPlayer {\n\tpublic readonly data: wclPlayer;\n\tpublic readonly id: number;\n\tpublic readonly name: string;\n\tpublic readonly type: string;\n\tpublic raidIndex: number = -1;\n\n\tprivate readonly simUI: RaidSimUI;\n\tprivate readonly fullType: string;\n\tprivate readonly spec: Spec | null;\n\n\treadonly player: Player<any>;\n\treadonly preset: RaidSimPreset<any>;\n\n\tinferredProfessions: Array<Profession> = [];\n\n\treadonly playersInParty: Array<WCLSimPlayer> = [];\n\n\tconstructor(data: wclPlayer, simUI: RaidSimUI, eventID: EventID) {\n\t\tthis.simUI = simUI;\n\t\tthis.data = data;\n\n\t\tthis.name = data.name;\n\t\tthis.id = data.id;\n\t\tthis.type = data.type;\n\n\t\tconst wclSpec = data.icon.split('-')[1];\n\t\tthis.fullType = this.type + wclSpec;\n\t\tconsole.log(`WCL spec: ${this.fullType}`);\n\n\t\tconst foundSpec = fullTypeToSpec[this.fullType] ?? null;\n\t\tif (foundSpec == null) {\n\t\t\tthrow new Error('Player type not implemented: ' + this.fullType);\n\t\t}\n\t\tthis.spec = foundSpec;\n\t\tthis.player = new Player(this.spec, simUI.sim);\n\n\t\tthis.preset = WCLSimPlayer.getMatchingPreset(foundSpec, data.talents);\n\t\tif (this.preset === undefined) {\n\t\t\tthrow new Error('Could not find matching preset: ' + JSON.stringify({\n\t\t\t\t'name': this.name,\n\t\t\t\t'type': this.fullType,\n\t\t\t\t'talents': data.talents,\n\t\t\t}).toString());\n\t\t}\n\n\t\t// Apply preset defaults.\n\t\tthis.player.applySharedDefaults(eventID);\n\t\tthis.player.setTalentsString(eventID, this.preset.talents.talentsString);\n\t\tthis.player.setGlyphs(eventID, this.preset.talents.glyphs!);\n\t\tthis.player.setConsumes(eventID, this.preset.consumes);\n\t\tthis.player.setSpecOptions(eventID, this.preset.specOptions);\n\t\tthis.player.setProfessions(eventID, [Profession.Engineering, Profession.Jewelcrafting]);\n\n\t\t// Apply settings from report data.\n\t\tthis.player.setName(eventID, data.name);\n\t\tthis.player.setGear(eventID, simUI.sim.db.lookupEquipmentSpec(EquipmentSpec.create({\n\t\t\titems: data.gear.map(gear => ItemSpec.create({\n\t\t\t\tid: gear.id,\n\t\t\t\tenchant: gear.permanentEnchant,\n\t\t\t\tgems: gear.gems ? gear.gems.map(gemInfo => gemInfo.id) : [],\n\t\t\t})),\n\t\t})));\n\t}\n\n\tprivate static getMatchingPreset(spec: Spec, talents: wclTalents[]): RaidSimPreset<Spec> {\n\t\tconst matchingPresets = playerPresets.filter((preset) => preset.spec == spec);\n\t\tlet presetIdx = 0;\n\n\t\tif (matchingPresets && matchingPresets.length > 1) {\n\t\t\tlet distance = 999;\n\t\t\t// Search talents and find the preset that the players talents most closely match.\n\t\t\tmatchingPresets.forEach((preset, i) => {\n\t\t\t\tconst presetTalents = getTalentTreePoints(preset.talents.talentsString);\n\t\t\t\t// Diff the distance to the preset.\n\t\t\t\tconst newDistance = presetTalents.reduce((acc, v, i) => acc += Math.abs(talents[i]?.guid - presetTalents[i]), 0);\n\n\t\t\t\t// If this is the best distance, assign this preset.\n\t\t\t\tif (newDistance < distance) {\n\t\t\t\t\tpresetIdx = i;\n\t\t\t\t\tdistance = newDistance;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn matchingPresets[presetIdx];\n\t}\n\n\tpublic toUnitReference(): UnitReference {\n\t\treturn UnitReference.create({\n\t\t\ttype: UnitReference_Type.Player,\n\t\t\tindex: this.raidIndex,\n\t\t});\n\t}\n\n\tpublic addPlayerInParty(other: WCLSimPlayer): boolean {\n\t\tif (other != this && !this.playersInParty.includes(other)) {\n\t\t\tthis.playersInParty.push(other);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst fullTypeToSpec: Record<string, Spec> = {\n\t'DeathKnightBlood': Spec.SpecTankDeathknight,\n\t'DeathKnightLichborne': Spec.SpecTankDeathknight,\n\t'DeathKnightRuneblade': Spec.SpecDeathknight,\n\t'DeathKnightBloodDPS': Spec.SpecDeathknight,\n\t'DeathKnightFrost': Spec.SpecDeathknight,\n\t'DeathKnightUnholy': Spec.SpecDeathknight,\n\t'DruidBalance': Spec.SpecBalanceDruid,\n\t'DruidFeral': Spec.SpecFeralDruid,\n\t'DruidWarden': Spec.SpecFeralTankDruid,\n\t'DruidGuardian': Spec.SpecFeralTankDruid,\n\t'DruidRestoration': Spec.SpecRestorationDruid,\n\t'HunterBeastMastery': Spec.SpecHunter,\n\t'HunterSurvival': Spec.SpecHunter,\n\t'HunterMarksmanship': Spec.SpecHunter,\n\t'MageArcane': Spec.SpecMage,\n\t'MageFire': Spec.SpecMage,\n\t'MageFrost': Spec.SpecMage,\n\t'PaladinHoly': Spec.SpecHolyPaladin,\n\t'PaladinJusticar': Spec.SpecProtectionPaladin,\n\t'PaladinProtection': Spec.SpecProtectionPaladin,\n\t'PaladinRetribution': Spec.SpecRetributionPaladin,\n\t'PriestHoly': Spec.SpecHealingPriest,\n\t'PriestDiscipline': Spec.SpecHealingPriest,\n\t'PriestShadow': Spec.SpecShadowPriest,\n\t'PriestSmite': Spec.SpecSmitePriest,\n\t'RogueAssassination': Spec.SpecRogue,\n\t'RogueCombat': Spec.SpecRogue,\n\t'RogueSubtlety': Spec.SpecRogue,\n\t'ShamanElemental': Spec.SpecElementalShaman,\n\t'ShamanEnhancement': Spec.SpecEnhancementShaman,\n\t'ShamanRestoration': Spec.SpecRestorationShaman,\n\t'WarlockDestruction': Spec.SpecWarlock,\n\t'WarlockAffliction': Spec.SpecWarlock,\n\t'WarlockDemonology': Spec.SpecWarlock,\n\t'WarriorArms': Spec.SpecWarrior,\n\t'WarriorFury': Spec.SpecWarrior,\n\t'WarriorChampion': Spec.SpecWarrior,\n\t'WarriorWarrior': Spec.SpecWarrior,\n\t'WarriorGladiator': Spec.SpecWarrior,\n\t'WarriorProtection': Spec.SpecProtectionWarrior,\n};\n\n// Spells which imply a specific Race.\nconst racialSpells: Array<{ id: number, name: string, race: Race }> = [\n\t{ id: 25046, name: 'Arcane Torrent (Energy)', race: Race.RaceBloodElf },\n\t{ id: 28730, name: 'Arcane Torrent (Mana)', race: Race.RaceBloodElf },\n\t{ id: 50613, name: 'Arcane Torrent (Runic Power)', race: Race.RaceBloodElf },\n\t{ id: 26297, name: 'Berserking', race: Race.RaceTroll },\n\t{ id: 20572, name: 'Blood Fury (AP)', race: Race.RaceOrc },\n\t{ id: 33697, name: 'Blood Fury (AP+SP)', race: Race.RaceOrc },\n\t{ id: 33702, name: 'Blood Fury (SP)', race: Race.RaceOrc },\n\t{ id: 20589, name: 'Escape Artist', race: Race.RaceGnome },\n\t{ id: 20594, name: 'Stoneform', race: Race.RaceDwarf },\n\t{ id: 20549, name: 'War Stomp', race: Race.RaceTauren },\n\t{ id: 7744, name: 'Will of the Forsaken', race: Race.RaceUndead },\n\t{ id: 59752, name: 'Will to Survive', race: Race.RaceHuman },\n];\n\n// Spells which imply a specific Profession.\nconst professionSpells: Array<{ id: number, name: string, profession: Profession }> = [\n\t{ id: 55503, name: 'Lifeblood', profession: Profession.Herbalism },\n\t{ id: 50305, name: 'Skinning', profession: Profession.Skinning },\n];\n\nconst externalCDSpells: Array<{ id: number, name: string, class: Class, applyFunc: (player: Player<any>, raidTarget: UnitReference) => SpecOptions<any> }> = [\n\t{\n\t\tid: 29166, name: 'Innervate', class: Class.ClassDruid, applyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<DruidSpecs>;\n\t\t\toptions.innervateTarget = raidTarget;\n\t\t\treturn options;\n\t\t}\n\t},\n\t{\n\t\tid: 10060, name: 'Power Infusion', class: Class.ClassPriest, applyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<PriestSpecs>;\n\t\t\toptions.powerInfusionTarget = raidTarget;\n\t\t\treturn options;\n\t\t}\n\t},\n\t{\n\t\tid: 57933, name: 'Tricks of the Trade', class: Class.ClassRogue, applyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<RogueSpecs>;\n\t\t\toptions.tricksOfTheTradeTarget = raidTarget;\n\t\t\treturn options;\n\t\t}\n\t},\n\t{\n\t\tid: 49016, name: 'Unholy Frenzy', class: Class.ClassDeathknight, applyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<DeathknightSpecs>;\n\t\t\toptions.unholyFrenzyTarget = raidTarget;\n\t\t\treturn options;\n\t\t}\n\t},\n];\n\n// Healing spells which only affect the caster's party.\nconst samePartyHealingSpells: Array<{ id: number, name: string }> = [\n\t{ id: 52042, name: 'Healing Stream Totem' },\n\t{ id: 48076, name: 'Holy Nova' },\n\t{ id: 48445, name: 'Tranquility' },\n\t{ id: 15290, name: 'Vampiric Embrace' },\n];\n\n// Healing spells which only affect a single party, but not necessarily the caster's party.\nconst otherPartyHealingSpells: Array<{ id: number, name: string }> = [\n\t{ id: 48072, name: 'Prayer of Healing' },\n];\n\ninterface wclUrlData {\n\treportID: string,\n\tfightID: string,\n}\n\ninterface wclCastEvent {\n\ttype: 'cast',\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n}\n\ninterface wclHealEvent {\n\ttype: 'heal',\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n\tamount: number;\n}\n\ninterface wclCombatantInfoEvent {\n\ttype: 'combatantinfo';\n\tsourceID: number;\n\tauras: {\n\t\tsource: number;\n\t\tability: number;\n\t\tname: string;\n\t}[];\n}\n\ninterface wclRateLimitData {\n\tlimitPerHour: number,\n\tpointsSpentThisHour: number,\n\tpointsResetIn: number\n}\n\n// Typed interface for WCL talents\ninterface wclTalents {\n\tname: string;\n\tguid: number;\n\ttype: number;\n\tabilityIcon: string;\n}\n\n// Typed interface for WCL Gems\ninterface wclGems {\n\tid: number;\n\titemLevel: number;\n\ticon: string;\n}\n\n// Typed interface for WCL Gear\ninterface wclGear {\n\tid: number;\n\tslot: number;\n\tquality: number;\n\ticon: string;\n\tname: string;\n\titemLevel: number;\n\tpermanentEnchant: number;\n\tpermanentEnchantName: string;\n\ttemporaryEnchant: number;\n\tgems?: wclGems[];\n}\n\n// Typed interface for WCL Player Data\ninterface wclPlayer {\n\tname: string;\n\tid: number;\n\tguid?: number;\n\ttype: string; // Paladin, Mage, etc.\n\ticon: string; // Paladin-Justicar, Mage-Fire, etc.\n\titemLevel?: number;\n\ttotal?: number;\n\tactiveTime?: number;\n\tactiveTimeReduced?: number;\n\tabilities?: unknown[]; // Don't care about abilities.\n\tdamageAbilities?: unknown[];\n\ttargets?: unknown[];\n\ttalents: wclTalents[];\n\tgear: wclGear[];\n}\n\ninterface _wclAura {\n\tname: string;\n\tid: number;\n\tguid: number;\n\ttype: string;\n\ticon: string;\n\ttotalUptime: number;\n\ttotalUses: number;\n\tbands: {\n\t\tstartTime: number,\n\t\tendTime: number,\n\t}[];\n}\n","import { EmbeddedDetailedResults } from \"../core/components/detailed_results.js\";\nimport { LogRunner } from \"../core/components/detailed_results/log_runner.js\";\nimport { addRaidSimAction, RaidSimResultsManager, ReferenceData } from \"../core/components/raid_sim_action.js\";\n\nimport { Player } from \"../core/player.js\";\nimport { Raid as RaidProto } from \"../core/proto/api.js\";\nimport { Class, Encounter as EncounterProto, RaidBuffs, TristateEffect } from \"../core/proto/common.js\";\nimport { Blessings } from \"../core/proto/paladin.js\";\nimport { BlessingsAssignments, RaidSimSettings, SavedEncounter } from \"../core/proto/ui.js\";\nimport { playerToSpec } from \"../core/proto_utils/utils.js\";\nimport { Sim } from \"../core/sim.js\";\nimport { SimUI } from \"../core/sim_ui.js\";\nimport { raidSimStatus } from '../core/launched_sims.js';\nimport { EventID, TypedEvent } from \"../core/typed_event.js\";\n\nimport { RaidTab } from \"./raid_tab.js\";\nimport { SettingsTab } from \"./settings_tab.js\";\n\nimport { BlessingsPicker } from \"./blessings_picker.js\";\nimport { implementedSpecs } from \"./presets.js\";\nimport { RaidPicker } from \"./raid_picker.js\";\n\nimport * as ImportExport from \"./import_export.js\";\n\ndeclare var pako: any;\n\nexport interface RaidSimConfig {\n\tknownIssues?: Array<string>,\n}\n\nconst extraKnownIssues: Array<string> = [\n\t//'We\\'re still missing implementations for many specs. If you\\'d like to help us out, check out our <a href=\"https://github.com/wowsims/wotlk\">Github project</a> or <a href=\"https://discord.gg/jJMPr9JWwx\">join our discord</a>!',\n];\n\nexport class RaidSimUI extends SimUI {\n\tprivate readonly config: RaidSimConfig;\n\tprivate raidSimResultsManager: RaidSimResultsManager | null = null;\n\tpublic raidPicker: RaidPicker | null = null;\n\tpublic blessingsPicker: BlessingsPicker | null = null;\n\n\t// Emits when the raid comp changes. Includes changes to buff bots.\n\treadonly compChangeEmitter = new TypedEvent<void>();\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\treadonly referenceChangeEmitter = new TypedEvent<void>();\n\n\tconstructor(parentElem: HTMLElement, config: RaidSimConfig) {\n\t\tsuper(parentElem, new Sim(), {\n\t\t\tcssClass: 'raid-sim-ui',\n\t\t\tcssScheme: 'raid',\n\t\t\tspec: null,\n\t\t\tlaunchStatus: raidSimStatus,\n\t\t\tknownIssues: (config.knownIssues || []).concat(extraKnownIssues),\n\t\t});\n\n\t\tthis.config = config;\n\n\t\tthis.sim.raid.compChangeEmitter.on(eventID => this.compChangeEmitter.emit(eventID));\n\t\t[\n\t\t\tthis.compChangeEmitter,\n\t\t\tthis.sim.changeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t\tthis.changeEmitter.on(() => this.recomputeSettingsLayout());\n\n\t\tthis.sim.setModifyRaidProto(raidProto => this.modifyRaidProto(raidProto));\n\t\tthis.sim.waitForInit().then(() => this.loadSettings());\n\n\t\tthis.addSidebarComponents();\n\t\tthis.addTopbarComponents();\n\t\tthis.addRaidTab();\n\t\tthis.addSettingsTab();\n\t\tthis.addDetailedResultsTab();\n\t}\n\n\tprivate loadSettings() {\n\t\tconst initEventID = TypedEvent.nextEventID();\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tlet loadedSettings = false;\n\n\t\t\tconst savedSettings = window.localStorage.getItem(this.getSettingsStorageKey());\n\t\t\tif (savedSettings != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconst settings = RaidSimSettings.fromJsonString(savedSettings);\n\t\t\t\t\tthis.fromProto(initEventID, settings);\n\t\t\t\t\tloadedSettings = true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('Failed to parse saved settings: ' + e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!loadedSettings) {\n\t\t\t\tthis.applyDefaults(initEventID);\n\t\t\t}\n\n\t\t\t// This needs to go last so it doesn't re-store things as they are initialized.\n\t\t\tthis.changeEmitter.on(eventID => {\n\t\t\t\tconst jsonStr = RaidSimSettings.toJsonString(this.toProto());\n\t\t\t\twindow.localStorage.setItem(this.getSettingsStorageKey(), jsonStr);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate addSidebarComponents() {\n\t\tthis.raidSimResultsManager = addRaidSimAction(this);\n\t\tthis.raidSimResultsManager.changeEmitter.on(eventID => this.referenceChangeEmitter.emit(eventID));\n\t}\n\n\tprivate addTopbarComponents() {\n\t\tthis.simHeader.addImportLink('JSON', (parent) => new ImportExport.RaidJsonImporter(this.rootElem, this));\n\t\tthis.simHeader.addImportLink('WCL', (parent) => new ImportExport.RaidWCLImporter(this.rootElem, this));\n\n\t\tthis.simHeader.addExportLink('JSON', (parent) => new ImportExport.RaidJsonExporter(this.rootElem, this));\n\t}\n\n\tprivate addRaidTab() {\n\t\tnew RaidTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addSettingsTab() {\n\t\tnew SettingsTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addDetailedResultsTab() {\n\t\tthis.addTab('Results', 'detailed-results-tab', `\n\t\t\t<div class=\"detailed-results\">\n\t\t\t</div>\n\t\t`);\n\n\t\tconst detailedResults = new EmbeddedDetailedResults(this.rootElem.getElementsByClassName('detailed-results')[0] as HTMLElement, this, this.raidSimResultsManager!);\n\t}\n\n\tprivate recomputeSettingsLayout() {\n\t\twindow.dispatchEvent(new Event('resize'));\n\t}\n\n\tprivate modifyRaidProto(raidProto: RaidProto) {\n\t\t// Apply blessings.\n\t\tconst numPaladins = this.getClassCount(Class.ClassPaladin);\n\t\tconst blessingsAssignments = this.blessingsPicker!.getAssignments();\n\t\timplementedSpecs.forEach(spec => {\n\t\t\tconst playerProtos = raidProto.parties\n\t\t\t\t.map(party => party.players.filter(player => player.class != Class.ClassUnknown && playerToSpec(player) == spec))\n\t\t\t\t.flat();\n\n\t\t\tblessingsAssignments.paladins.forEach((paladin, i) => {\n\t\t\t\tif (i >= numPaladins) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (paladin.blessings[spec] == Blessings.BlessingOfKings) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfKings = true);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfMight) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfMight = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfWisdom) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfWisdom = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfSanctuary) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfSanctuary = true);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getCurrentData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getReferenceData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetActivePlayers(): Array<Player<any>> {\n\t\treturn this.sim.raid.getActivePlayers();\n\t}\n\n\tgetClassCount(playerClass: Class): number {\n\t\treturn this.getActivePlayers().filter(player => player.isClass(playerClass)).length;\n\t}\n\n\tapplyDefaults(eventID: EventID) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.sim.raid.fromProto(eventID, RaidProto.create({\n\t\t\t\tnumActiveParties: 5,\n\t\t\t}));\n\t\t\tthis.sim.setPhase(eventID, 1);\n\t\t\tthis.sim.encounter.applyDefaults(eventID);\n\t\t\tthis.sim.applyDefaults(eventID, true, true);\n\t\t\tthis.sim.setShowDamageMetrics(eventID, true);\n\t\t});\n\t}\n\n\ttoProto(): RaidSimSettings {\n\t\treturn RaidSimSettings.create({\n\t\t\tsettings: this.sim.toProto(),\n\t\t\traid: this.sim.raid.toProto(true),\n\t\t\tblessings: this.blessingsPicker!.getAssignments(),\n\t\t\tencounter: this.sim.encounter.toProto(),\n\t\t});\n\t}\n\n\ttoLink(): string {\n\t\tconst proto = this.toProto();\n\t\t// When sharing links, people generally don't intend to share settings.\n\t\tproto.settings = undefined;\n\n\t\tconst protoBytes = RaidSimSettings.toBinary(proto);\n\t\tconst deflated = pako.deflate(protoBytes, { to: 'string' });\n\t\tconst encoded = btoa(String.fromCharCode(...deflated));\n\n\t\tconst linkUrl = new URL(window.location.href);\n\t\tlinkUrl.hash = encoded;\n\t\treturn linkUrl.toString();\n\t}\n\n\tfromProto(eventID: EventID, settings: RaidSimSettings) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tif (settings.settings) {\n\t\t\t\tthis.sim.fromProto(eventID, settings.settings);\n\t\t\t}\n\t\t\tthis.sim.raid.fromProto(eventID, settings.raid || RaidProto.create());\n\t\t\tthis.sim.encounter.fromProto(eventID, settings.encounter || EncounterProto.create());\n\t\t\tthis.blessingsPicker!.setAssignments(eventID, settings.blessings || BlessingsAssignments.create());\n\t\t});\n\t}\n\n\tclearRaid(eventID: EventID) {\n\t\tthis.sim.raid.clear(eventID);\n\t}\n\n\t// Returns the actual key to use for local storage, based on the given key part and the site context.\n\tgetStorageKey(keyPart: string): string {\n\t\treturn '__wotlk_raid__' + keyPart;\n\t}\n\n\tgetSavedRaidStorageKey(): string {\n\t\treturn this.getStorageKey('__savedRaid__');\n\t}\n}\n","import { RaidSimUI } from './raid_sim_ui.js';\n\nconst ui = new RaidSimUI(document.body, {});\n"],"names":["specSimFactories","Spec","SpecTankDeathknight","parentElem","player","TankDeathknightSimUI","SpecDeathknight","DeathknightSimUI","SpecBalanceDruid","BalanceDruidSimUI","SpecFeralDruid","FeralDruidSimUI","SpecFeralTankDruid","FeralTankDruidSimUI","SpecRestorationDruid","RestorationDruidSimUI","SpecElementalShaman","ElementalShamanSimUI","SpecEnhancementShaman","EnhancementShamanSimUI","SpecRestorationShaman","RestorationShamanSimUI","SpecHunter","HunterSimUI","SpecMage","MageSimUI","SpecRogue","RogueSimUI","SpecHolyPaladin","HolyPaladinSimUI","SpecProtectionPaladin","ProtectionPaladinSimUI","SpecRetributionPaladin","RetributionPaladinSimUI","SpecHealingPriest","HealingPriestSimUI","SpecShadowPriest","ShadowPriestSimUI","SpecSmitePriest","SmitePriestSimUI","SpecWarrior","WarriorSimUI","SpecProtectionWarrior","ProtectionWarriorSimUI","SpecWarlock","WarlockSimUI","playerPresets","naturalSpecOrder","map","getSpecConfig","config","raidSimPresets","flat","implementedSpecs","Set","preset","spec","NEW_PLAYER","LATEST_PHASE_WITH_ALL_PRESETS","Math","min","max","Object","keys","defaultGear","Faction","Alliance","k","parseInt","RaidPicker","Component","constructor","parent","raidSimUI","super","__publicField","this","raid","sim","raidControls","document","createElement","classList","add","rootElem","appendChild","newPlayerPicker","NewPlayerPicker","EnumPicker","label","labelTooltip","values","name","value","changedEvent","numActivePartiesChangeEmitter","getValue","getNumActiveParties","setValue","eventID","newValue","setNumActiveParties","Horde","_picker","factionChangeEmitter","getFaction","picker","setFaction","Array","val","phase","phaseChangeEmitter","getPhase","setPhase","partiesContainer","partyPickers","getParties","party","i","PartyPicker","updateActiveParties","forEach","partyPicker","index","remove","on","ondragend","_event","clearDragPlayer","clearDragParty","getCurrentFaction","getCurrentPhase","getPlayerPicker","raidIndex","floor","MAX_PARTY_SIZE","playerPickers","getPlayerPickers","setDragPlayer","fromIndex","type","currentDragPlayer","currentDragPlayerFromIndex","currentDragType","setDragParty","currentDragParty","raidPicker","setAttribute","innerHTML","playersContainer","getElementsByClassName","PlayerPicker","dpsResultElem","referenceDeltaElem","referenceChangeEmitter","currentData","getCurrentData","referenceData","getReferenceData","partyDps","simResult","raidMetrics","parties","dps","avg","referenceDps","textContent","toFixed","formatDeltaTextElem","ondragstart","event","target","dataTransfer","dropEffect","effectAllowed","dragEnterCounter","ondragenter","preventDefault","ondragleave","ondragover","ondrop","TypedEvent","nextEventID","freezeAllAndDo","srcPartyPicker","srcPlayerPicker","dstPlayerPicker","srcPlayer","dstPlayer","setPlayer","labelElem","iconElem","nameElem","resultsElem","compChangeEmitter","newPlayer","getPlayer","playerDps","getPlayerWithRaidIndex","dropData","getData","length","dragType","fromPlayerPicker","binary","atob","bytes","Uint8Array","charCodeAt","playerProto","PlayerProto","fromBinary","localPlayer","Player","playerToSpec","fromProto","clone","update","isTankSpec","tanks","getTanks","emptyIdx","findIndex","tank","getPlayerFromUnitReference","setTanks","concat","makeUnitReference","newOptions","getSpecOptions","innervateTarget","newUnitReference","getRaidIndex","setSpecOptions","powerInfusionTarget","focusMagicTarget","applyNewPlayerAssignments","emit","className","classCssClass","cssClassForClass","getClass","getSpecIcon","getName","querySelector","bindPlayerEvents","addEventListener","setName","emptyName","dragStart","playerDataProto","toProto","setData","btoa","String","fromCharCode","toBinary","editElem","copyElem","deleteElem","Tooltip","getOrCreateInstance","deleteTooltip","setDragImage","onclick","PlayerEditorModal","hide","BaseModal","body","closeButton","fixed","header","id","insertAdjacentHTML","editorRoot","getEnumValues","Class","wowClass","ClassUnknown","matchingPresets","filter","specToClass","classPresetsContainer","matchingPreset","presetElemFragment","tooltip","iconUrl","presetElem","children","dragImage","Image","src","applySharedDefaults","setRace","defaultFactionRaces","setTalentsString","talents","talentsString","setGlyphs","glyphs","Glyphs","create","specOptions","setConsumes","consumes","defaultName","setProfession1","otherDefaults","profession1","Profession","Engineering","setProfession2","profession2","Jewelcrafting","setDistanceFromTarget","distanceFromTarget","waitForInit","then","gearSet","setGear","db","lookupEquipmentSpec","RaidStats","categories","RAID_STATS_OPTIONS","sections","section","sectionElem","contentElem","categoryOptions","push","RaidStatsCategory","changeEmitter","c","options","counterElem","tooltipElem","effects","opt","RaidStatsEffect","playerData","class","statsLink","customClass","html","placement","title","effect","total","sum","count","curPlayers","playerCssClass","textCssClassForClass","actionId","fill","getActivePlayers","p","condition","raidData","negateIf","cond","playerClass","clazz","extraCondition","isClass","playerClassAndTalentInternal","talentName","negateTalent","Boolean","getTalents","playerClassAndTalent","playerClassAndMissingTalent","playerSpecAndTalentInternal","isSpec","playerSpecAndTalent","raidBuff","buffName","getBuffs","isHealingSpec","isMeleeDpsSpec","isRangedDpsSpec","ActionId","fromSpellId","ClassShaman","bloodlust","ClassDruid","fromItemId","ClassPaladin","aura","PaladinAura","DevotionAura","totems","earth","EarthTotem","StoneskinTotem","ClassPriest","StrengthOfEarthTotem","ClassDeathknight","ClassMage","ClassWarlock","summon","WarlockSummon","Felhunter","ClassWarrior","shout","WarriorShout","WarriorShoutBattle","ClassHunter","water","WaterTotem","ManaSpringTotem","air","AirTotem","WindfuryTotem","fire","FireTotem","TotemOfWrath","FlametongueTotem","WrathOfAirTotem","WarriorShoutCommanding","Imp","ClassRogue","getRotation","sunderArmor","SunderArmor","SunderArmorMaintain","exposeArmorFrequency","ExposeFrequency","Maintain","petType","HunterPetType","Worm","maintainFaerieFire","curse","WarlockCurse","Weakness","Wasp","Bat","includes","Rhino","getTalentTree","maintainImprovedScorch","Elements","maintainDemoShout","demoShoutChoice","maintainDemoralizingRoar","CarrionBird","maintainThunderClap","thunderClapChoice","sting","HunterStingType","ScorpidSting","RaidTab","SimTab","simUI","identifier","leftPanel","rightPanel","contentContainer","buildTabContent","savedRaidManager","SavedDataManager","storageKey","getSavedRaidStorageKey","SavedRaid","blessings","blessingsPicker","getAssignments","faction","newRaid","RaidProto","setAssignments","BlessingsAssignments","changeEmitters","equals","a","b","toJson","fromJson","obj","loadUserData","UnitReferencePicker","Input","modObj","curPlayer","curUnitReference","getInputValue","buttonElem","dropdownElem","currentOptions","updateOptions","init","makeTargetOptions","isDropdown","getPlayers","option","makeOption","prevUnitReference","UnitReference","setInputValue","inputChanged","data","makeOptionElem","getInputElem","emptyUnitReference","optionData","find","outerHTML","playerFragment","AssignmentsPicker","innervatesPicker","InnervatesPicker","powerInfusionsPicker","PowerInfusionsPicker","tricksOfTheTradesPicker","TricksOfTheTradesPicker","unholyFrenzyPicker","UnholyFrenzyPicker","focusMagicsPicker","FocusMagicsPicker","AssignedBuffPicker","targetPickers","getTitle","sourcePlayers","getSourcePlayers","sourcePlayer","sourcePlayerIndex","row","sourceElem","arrow","raidTargetPicker","extraCssClasses","noTargetLabel","specOptionsChangeEmitter","getPlayerValue","setPlayerValue","targetPickerData","targetPicker","targetPlayer","powerInfusion","tricksOfTheTradeTarget","hysteria","unholyFrenzyTarget","BlessingsPicker","assignments","makeDefaultBlessings","specs","memeSpecs","paladinIndexes","append","buildSpecIcon","container","paladinIdx","pickers","blessingPicker","IconEnumPicker","numColumns","color","classColors","Blessings","BlessingUnknown","BlessingOfKings","BlessingOfMight","BlessingOfWisdom","BlessingOfSanctuary","zeroValue","enableWhen","numPaladins","getClassCount","paladins","updatePickers","_eventID","fragment","titleIcons","icon","specNames","newAssignments","TanksPicker","tanksChangeEmitter","j","raid2","SettingsTab","buildColumn","column1","column2","column3","buildEncounterSettings","buildConsumesSettings","buildOtherSettings","buildTankSettings","buildAssignmentSettings","buildBlessingsPicker","buildSavedDataPickers","contentBlock","ContentBlock","EncounterPicker","bodyElement","encounter","showExecuteProportion","makeBooleanRaidIconBuffInput","Tooltips.BLESSINGS_SECTION","savedEncounterManager","getSavedEncounterStorageKey","SavedEncounter","newEncounter","field","IconPicker","states","buffsChangeEmitter","newBuffs","setBuffs","RaidJsonImporter","Importer","descriptionElem","onImport","settings","RaidSimSettings","fromJsonString","ignoreUnknownFields","close","RaidJsonExporter","Exporter","JSON","stringify","RaidWCLImporter","textElem","getWCLBearerToken","token","response","fetch","method","headers","Authorization","URLSearchParams","grant_type","json","access_token","queryWCL","query","Accept","queryURL","queryCounter","res","encodeURI","result","errors","errorStr","e","message","join","Error","console","debug","parseURL","url","match","urlData","reportID","fightID","fightDataQuery","fights","reportData","report","getRateLimit","importLink","importButton","disabled","style","cursor","doImport","error","alert","removeProperty","reportDataQuery","racialSpells","professionSpells","spell","externalCDSpells","samePartyHealingSpells","otherPartyHealingSpells","wclData","playerDetails","entries","wclPlayers","wclPlayer","WCLSimPlayer","inferRace","inferProfessions","inferAssignments","inferPartyComposition","getEncounterProto","getRaidProto","clearRaid","Race","RaceUnknown","guild","combatantInfoEvents","combatantInfo","auras","ability","source","getRace","RaceDraenei","log","raceNames","get","castEventsBySpellId","bucket","reportCastEvents","abilityGameID","sourceID","race","raceToFaction","inferredProfessions","profession","professionNames","professions","distinct","getGear","getProfessionRequirements","setProfessions","fightCastEvents","targetID","applyFunc","toUnitReference","setPlayersInParty","player1","player2","reason","addPlayerInParty","healEventsBySpellId","fightHealEvents","spellEvents","spellEventsByTimestamp","timestamp","_timestamp","eventsAtTime","spellTargets","inferredPlayers","playersInParty","nextEmptyPartyIdx","partyMembers","numMembers","member","partyIdx","allRaidIndexes","nextIdx","idx","some","fight","EncounterProto","duration","endTime","startTime","targets","closestEncounterPreset","getAllPresetEncounters","enc","path","mob","Encounter","defaultTargetProto","MAX_NUM_PARTIES","_party","PartyProto","players","_player","positionInParty","wclSpec","split","fullType","foundSpec","fullTypeToSpec","getMatchingPreset","toString","EquipmentSpec","items","gear","ItemSpec","enchant","permanentEnchant","gems","gemInfo","presetIdx","distance","presetTalents","getTalentTreePoints","newDistance","reduce","acc","v","abs","guid","UnitReference_Type","other","DeathKnightBlood","DeathKnightLichborne","DeathKnightRuneblade","DeathKnightBloodDPS","DeathKnightFrost","DeathKnightUnholy","DruidBalance","DruidFeral","DruidWarden","DruidGuardian","DruidRestoration","HunterBeastMastery","HunterSurvival","HunterMarksmanship","MageArcane","MageFire","MageFrost","PaladinHoly","PaladinJusticar","PaladinProtection","PaladinRetribution","PriestHoly","PriestDiscipline","PriestShadow","PriestSmite","RogueAssassination","RogueCombat","RogueSubtlety","ShamanElemental","ShamanEnhancement","ShamanRestoration","WarlockDestruction","WarlockAffliction","WarlockDemonology","WarriorArms","WarriorFury","WarriorChampion","WarriorWarrior","WarriorGladiator","WarriorProtection","RaceBloodElf","RaceTroll","RaceOrc","RaceGnome","RaceDwarf","RaceTauren","RaceUndead","RaceHuman","Herbalism","Skinning","raidTarget","extraKnownIssues","SimUI","Sim","cssClass","cssScheme","launchStatus","raidSimStatus","knownIssues","emitter","recomputeSettingsLayout","setModifyRaidProto","raidProto","modifyRaidProto","loadSettings","addSidebarComponents","addTopbarComponents","addRaidTab","addSettingsTab","addDetailedResultsTab","initEventID","loadedSettings","savedSettings","window","localStorage","getItem","getSettingsStorageKey","warn","applyDefaults","jsonStr","toJsonString","setItem","raidSimResultsManager","addRaidSimAction","simHeader","addImportLink","ImportExport.RaidJsonImporter","ImportExport.RaidWCLImporter","addExportLink","ImportExport.RaidJsonExporter","simTabContentsContainer","addTab","EmbeddedDetailedResults","dispatchEvent","Event","blessingsAssignments","playerProtos","paladin","buffs","blessingOfKings","blessingOfMight","TristateEffect","TristateEffectImproved","blessingOfWisdom","blessingOfSanctuary","numActiveParties","setShowDamageMetrics","toLink","proto","protoBytes","deflated","pako","deflate","to","encoded","linkUrl","URL","location","href","hash","clear","getStorageKey","keyPart"],"mappings":"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"}